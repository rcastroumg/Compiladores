package arbolast;
import java_cup.runtime.Symbol;

parser code
{:
    public Nodo instrucciones;
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error en simbolo: "+s.value+", "+s.left+", "+s.right);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error en simbolo: "+s.value+", "+s.left+", "+s.right);
    }
:}

action code
{:
    private Nodo transforma_Switch_If(Nodo switchExpr, Nodo casesNode) {
        // Verifica si el nodo "Cases" con multiples nodos
        if (casesNode.valor.equals("cases")) {
            // obtiene los nodos hijos
            Nodo prevCases = casesNode.hijos.get(0);
            Nodo currentCase = casesNode.hijos.get(1);
            
            // Obtiene las expresiones y las instrucciones
            Nodo caseExpr = currentCase.hijos.get(0);
            Nodo caseInsts = currentCase.hijos.get(1);
            
            // Crea el nodo de comparacion del if
            Nodo comparison = new Nodo("==");
            comparison.hijos.add(switchExpr);
            comparison.hijos.add(caseExpr);
            
            // Crea el nodo If del case actual
            Nodo ifNode = new Nodo("if");
            ifNode.hijos.add(comparison);
            ifNode.hijos.add(caseInsts);
            
            // Agrega el nodo Else, segun los siguientes Case de forma recursiva
            Nodo elseNode = transforma_Switch_If(switchExpr, prevCases);
            Nodo insts = new Nodo("instrucciones");
            insts.hijos.add(elseNode);
            ifNode.hijos.add(insts);
            
            return ifNode;
        } 
        // Valida si es un solo case
        else if (casesNode.valor.equals("case1")) {
            Nodo caseNode = casesNode.hijos.get(0);
            Nodo caseExpr = caseNode.hijos.get(0);
            Nodo caseInsts = caseNode.hijos.get(1);
            
            // Crea el nodo de comparacion del if
            Nodo comparison = new Nodo("==");
            comparison.hijos.add(switchExpr);
            comparison.hijos.add(caseExpr);
            
            // Crea el nodo If del case actual
            Nodo ifNode = new Nodo("if");
            ifNode.hijos.add(comparison);
            ifNode.hijos.add(caseInsts);
            
            return ifNode;
        }
        // Valida si tiene nodo default
        else if (casesNode.valor.equals("default")) {
            Nodo caseNode = casesNode.hijos.get(0);
            Nodo caseExpr = caseNode.hijos.get(0);
            Nodo caseInsts = caseNode.hijos.get(1);
            
            // Crea el nodo de comparacion del if
            Nodo comparison = new Nodo("==");
            comparison.hijos.add(switchExpr);
            comparison.hijos.add(caseExpr);

            // Crea el nodo default 
            Nodo defaultNode = casesNode.hijos.get(1);
            Nodo defaultInsts = defaultNode.hijos.get(0);
            
            // Crea el nodo If del case y le agrega como else el nodo default
            Nodo ifNode = new Nodo("if");
            ifNode.hijos.add(comparison);
            ifNode.hijos.add(caseInsts);
            ifNode.hijos.add(defaultInsts);
                        
            return ifNode;
        }
        
        return new Nodo("error al transformar switch");
    }
:}

terminal PARENTESIS_ABIERTO, PARENTESIS_CERRADO, COMA, IF, ELSE, END, WHILE,
    FOR, DO, LLAVE_ABIERTO, LLAVE_CERRADO, SWITCH, CASE, DEFAULT, DOS_PUNTOS,
    CONCAT, PUTS, OR, AND, NOT, IGUAL_IGUAL, MENOR, MAYOR, IGUAL, MAS, 
    ASTERISCO, PUNTO_COMA;

terminal String ENTERO, CADENA, ID;

non terminal inicio;

non terminal Nodo instrucciones, instruccion, asignacion, if, while, for, 
    dowhile, switch, cases, case, default, puts, expresion, expresiones;

precedence left OR;
precedence left AND;
precedence left NOT;
precedence left IGUAL_IGUAL;
precedence left MAYOR, MENOR;
precedence left MAS;
precedence left ASTERISCO;
precedence right IGUAL;

start with inicio;

inicio ::= instrucciones:insts
{:
parser.instrucciones = insts;
:};
    

instrucciones ::= instrucciones:insts instruccion:inst
{:
Nodo nodo = insts;
nodo.hijos.add(inst);
RESULT = nodo;
:}
    | instruccion:inst
{:
Nodo nodo = new Nodo("Instruccion");
nodo.hijos.add(inst);
RESULT = nodo;
:}
    ;

instruccion ::= asignacion:inst
{:
RESULT = inst;
:}
    | if:inst
{:
RESULT = inst;
:}
    | while:inst
{:
RESULT = inst;
:}
    | for:inst
{:
RESULT = inst;
:}
    | dowhile:inst
{:
RESULT = inst;
:}
    | switch:inst
{:
RESULT = inst;
:}
    | puts:inst
{:
RESULT = inst;
:}
| error{:
Nodo n = new Nodo("Error");
RESULT = n;
:}
    
    ;

asignacion ::= ID:id IGUAL expresion:expr
{:
Nodo nodoId = new Nodo("variable");
nodoId.hijos.add(new Nodo(id));
Nodo inst = new Nodo("asignacion");
inst.hijos.add(nodoId);
inst.hijos.add(expr);
RESULT = inst;
:}
    ;

if ::= IF expresion:expr instrucciones:insts END
{:
Nodo nodo = new Nodo("if");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;
:}
    | IF expresion:expr instrucciones:insts ELSE instrucciones:insts2 END
{:
Nodo nodo = new Nodo("if");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
nodo.hijos.add(insts2);
RESULT = nodo;
:}
    ;

while ::= WHILE expresion:expr instrucciones:insts END
{:
Nodo nodo = new Nodo("while");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;
:}
    ;

for ::= FOR PARENTESIS_ABIERTO instrucciones:asign PUNTO_COMA expresion:expr PUNTO_COMA instrucciones:asign2 PARENTESIS_CERRADO instrucciones:insts END
{:
Nodo nodo = new Nodo("for");
nodo.hijos.add(asign);
nodo.hijos.add(expr);
nodo.hijos.add(asign2);
nodo.hijos.add(insts);
RESULT = nodo;
:}
    ;

dowhile ::= DO LLAVE_ABIERTO instrucciones:insts LLAVE_CERRADO WHILE expresion:expr END
{:
Nodo nodo = new Nodo("dowhile");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;
:}
    ;

switch ::= SWITCH PARENTESIS_ABIERTO expresion:expr PARENTESIS_CERRADO LLAVE_ABIERTO cases:cases LLAVE_CERRADO
{:
Nodo result = transforma_Switch_If(expr, cases);
RESULT = result;
:}
    ;

cases ::= case:_case cases:cases 
{: 
Nodo nodo = new Nodo("cases");
nodo.hijos.add(cases);
nodo.hijos.add(_case);
RESULT = nodo;
:}
    | case:_case
{: 
Nodo nodo = new Nodo("case1");
nodo.hijos.add(_case);
RESULT = nodo;
:}
    | case:_case default:_def
{: 
Nodo nodo = new Nodo("default");
nodo.hijos.add(_case);
nodo.hijos.add(_def);
RESULT = nodo;
:}
;

case ::= CASE expresion:expr DOS_PUNTOS instrucciones:insts END
{:
Nodo nodo = new Nodo("case_data");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;
:}
    | CASE expresion:expr DOS_PUNTOS instrucciones:insts
{:
Nodo nodo = new Nodo("case_data");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;
:}
;

default ::= DEFAULT DOS_PUNTOS instrucciones:insts END
{:
Nodo nodo = new Nodo("default");
nodo.hijos.add(insts);
RESULT = nodo;
:}
    | DEFAULT DOS_PUNTOS instrucciones:insts
{:
Nodo nodo = new Nodo("default");
nodo.hijos.add(insts);
RESULT = nodo;
:}
;



puts ::= PUTS expresion:expr
{:
Nodo nodo =  new Nodo("puts");
nodo.hijos.add(expr);
RESULT = nodo;
:}
    ;

expresion ::= expresion:expr MAS expresion:expr2
{:
Nodo nodo = new Nodo("+");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr ASTERISCO expresion:expr2
{:
Nodo nodo = new Nodo("*");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr MAYOR expresion:expr2
{:
Nodo nodo = new Nodo(">");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr MENOR expresion:expr2
{:
Nodo nodo = new Nodo("<");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr IGUAL_IGUAL expresion:expr2
{:
Nodo nodo = new Nodo("==");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | NOT expresion:expr
{:
Nodo nodo = new Nodo("not");
nodo.hijos.add(expr);
RESULT = nodo;
:}
    | expresion:expr OR expresion:expr2
{:
Nodo nodo = new Nodo("or");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr AND expresion:expr2
{:
Nodo nodo = new Nodo("and");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | PARENTESIS_ABIERTO expresion:expr PARENTESIS_CERRADO
{:
RESULT = expr;
:}
    | CONCAT PARENTESIS_ABIERTO expresiones:exprs PARENTESIS_CERRADO
{:
Nodo nodo = new Nodo("concatenar");
nodo.hijos.add(exprs);
RESULT = nodo;
:}
    | ID:id
{:
Nodo nodo = new Nodo("variable");
nodo.hijos.add(new Nodo(id));
RESULT = nodo;
:}
    | ENTERO:entero
{:
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("entero");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(entero));
RESULT = nodo;
:}
    | CADENA:cadena
{:
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("cadena");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(cadena));
RESULT = nodo;
:}
    ;

expresiones ::= expresiones:exprs COMA expresion:expr
{:
Nodo nodo = exprs;
nodo.hijos.add(expr);
RESULT = nodo;
:}
    | expresion:expr
{:
Nodo nodo = new Nodo("Expresion");
nodo.hijos.add(expr);
RESULT = nodo;
:}
    ;