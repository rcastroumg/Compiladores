package compiladores_final;
import java_cup.runtime.Symbol;
import java.util.Stack;
import compiladores_final.Interfaz;
import java.util.List;
import java.util.ArrayList;

parser code
{:
    public TablaSimbolos instrucciones;
    
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en simbolo: "+s.value+", "+s.left+", "+s.right);
        Interfaz.notificar_err("Error sintactico en simbolo: "+s.value+", linea "+s.left+", columna "+s.right);
    }

    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico en simbolo: "+s.value+", "+s.left+", "+s.right);
        Interfaz.notificar_err("Error sintactico en simbolo: "+s.value+", linea "+s.left+", columna "+s.right);
    }
:}

action code
{:
    Stack <String> ambito = new Stack <String>();
    int contadorSentencia = 0;

    TablaSimbolos tablaSimbolos = new TablaSimbolos();
:}

terminal PARENTESIS_ABIERTO, PARENTESIS_CERRADO, LLAVE_ABIERTO, LLAVE_CERRADO, COMA,
    CLASE, IF, ELSE, WHILE, FOR,
    DOS_PUNTOS, PUNTO_COMA, AMPERSAND, TERNARIO,
    IMPRIMIR, OR, AND, NOT, IGUAL_IGUAL, MENOR, MAYOR, IGUAL, MAS, 
    ASTERISCO, MENOS, SLASH, POTENCIA, MODULO, VOID, RETURN;

terminal String ENTERO, DOUBLE, CADENA, TIPO, ID, CARACTER, BOOLEANO;

non terminal inicio;

non terminal instrucciones, instruccion, clase, clases, asignacion, declaracion, if, if_else_part, while, for, 
    dowhile, switch, cases, case, default, puts, expresion, expresiones, ids, variable,
    declaraciones, tipodeclaracion, metodo, tipometodo, tipovar, declaraparam, idsparam, retorno;

precedence left OR;
precedence left AND;
precedence left NOT;
precedence left IGUAL_IGUAL;
precedence left MAYOR, MENOR;
precedence left MAS;
precedence left MENOS;
precedence left ASTERISCO;
precedence left SLASH;
precedence left POTENCIA;
precedence left MODULO;
precedence right IGUAL;

start with inicio;

inicio ::= clases:clases
{:
parser.instrucciones = tablaSimbolos;
:};

clases ::= clases:clases clase:clase
    | clase:clase
;

clase ::= ID:id DOS_PUNTOS CLASE
    {: 
        tablaSimbolos.agregarSimbolo(id, "clase", 0);
        tablaSimbolos.entrarAmbito(id); 
    :}
    LLAVE_ABIERTO declaraciones LLAVE_CERRADO
    {:
        tablaSimbolos.salirAmbito();
    :};


declaraciones ::= declaraciones tipodeclaracion
    | tipodeclaracion
;

tipodeclaracion ::= declaracion:inst PUNTO_COMA
    | metodo
;

metodo ::= ID:id 
    {:
        tablaSimbolos.entrarAmbito(tablaSimbolos.getAmbitoActual() + "." + id);
    :}
    PARENTESIS_ABIERTO declaraparam PARENTESIS_CERRADO DOS_PUNTOS tipometodo:tipomethod 
    {:
        tablaSimbolos.salirAmbito();
        tablaSimbolos.agregarSimbolo(id, (String)tipomethod+"()", 0);
        tablaSimbolos.entrarAmbito(tablaSimbolos.getAmbitoActual() + "." + id);
    :}
    LLAVE_ABIERTO instrucciones:insts retorno LLAVE_CERRADO
    {:
        tablaSimbolos.salirAmbito();
    :}
;

retorno ::= RETURN ID PUNTO_COMA
    | /* vacío */
;

tipometodo ::= TIPO:tipo {: RESULT=tipo; :}
    | VOID:vacio {: RESULT="void"; :}
;

instrucciones ::= instrucciones:insts instruccion:inst
    | instruccion:inst
    ;

instruccion ::= asignacion:inst PUNTO_COMA
    | declaracion:inst PUNTO_COMA
    | if:inst
    | while:inst
    | for:inst
    | error PUNTO_COMA 
    ;


declaracion ::= ids:ids DOS_PUNTOS tipovar:tipo IGUAL expresion:expr
{:
    for (String var : (List<String>)ids) {
        tablaSimbolos.agregarSimbolo(var, (String)tipo, 1);
    }
:}
    | ids:ids DOS_PUNTOS tipovar:tipo
{:
    for (String var : (List<String>)ids) {
        tablaSimbolos.agregarSimbolo(var, (String)tipo, 1);
    }
:}
    ;

tipovar ::= TIPO:tipo {: RESULT=tipo; :}
    | ID:tipo {: RESULT=tipo; :}
;

ids ::= ids:ids COMA ID:id
{:
    ((List<String>)ids).add((String)id);
    RESULT = ids;
:}
    | ID:id
{:
    List<String> lista = new ArrayList<>();
    lista.add((String)id);
    RESULT = lista;
:} ;

declaraparam ::= idsparam:ids
    |
    ;

idsparam ::= idsparam:ids COMA ID:id DOS_PUNTOS TIPO:tipo
{:
    tablaSimbolos.agregarSimbolo(id, tipo, 1);
:}
    | ID:id DOS_PUNTOS TIPO:tipo
{:
    tablaSimbolos.agregarSimbolo(id, tipo, 1);
:} ;

asignacion ::= ID:id IGUAL expresion:expr
    | ID:id IGUAL expresion:expr TERNARIO expresion:expr2 DOS_PUNTOS expresion:expr3
    ;

if ::= IF 
    {:
        contadorSentencia++;
        tablaSimbolos.entrarAmbito(tablaSimbolos.getAmbitoActual() + ".if" + contadorSentencia);
    :}
    PARENTESIS_ABIERTO expresion:expr PARENTESIS_CERRADO LLAVE_ABIERTO instrucciones:insts LLAVE_CERRADO if_else_part:elsepart
    {:
        tablaSimbolos.salirAmbito();
    :}
    ;

if_else_part ::= ELSE
    {:
        tablaSimbolos.salirAmbito();
        tablaSimbolos.entrarAmbito(tablaSimbolos.getAmbitoActual() + ".else" + contadorSentencia);
    :}
    LLAVE_ABIERTO instrucciones:insts2 LLAVE_CERRADO
    | /* vacío */
    ;

while ::= WHILE 
    {:
        contadorSentencia++;
        tablaSimbolos.entrarAmbito(tablaSimbolos.getAmbitoActual() + ".while" + contadorSentencia);
    :}
    PARENTESIS_ABIERTO  expresion:expr PARENTESIS_CERRADO LLAVE_ABIERTO instrucciones:insts LLAVE_CERRADO
    {:
        tablaSimbolos.salirAmbito();
    :}
    ;

for ::= FOR 
    {:
        contadorSentencia++;
        tablaSimbolos.entrarAmbito(tablaSimbolos.getAmbitoActual() + ".for" + contadorSentencia);
    :}
    PARENTESIS_ABIERTO asignacion:inicia PUNTO_COMA expresion:compara PUNTO_COMA asignacion:salto PARENTESIS_CERRADO LLAVE_ABIERTO instrucciones:insts LLAVE_CERRADO
    {:
        tablaSimbolos.salirAmbito();
    :}
    ;



expresion ::= expresion:expr MAS expresion:expr2
    | expresion:expr MENOS expresion:expr2
    | expresion:expr ASTERISCO expresion:expr2
    | expresion:expr SLASH expresion:expr2
    | expresion:expr POTENCIA expresion:expr2
    | expresion:expr MODULO expresion:expr2
    | expresion:expr MAYOR expresion:expr2
    | expresion:expr MENOR expresion:expr2
    | expresion:expr IGUAL_IGUAL expresion:expr2
    | NOT expresion:expr
    | expresion:expr OR expresion:expr2
    | expresion:expr AND expresion:expr2
    | PARENTESIS_ABIERTO expresion:expr PARENTESIS_CERRADO
    | ID:id
    | ENTERO:entero
    | DOUBLE:double_
    | CADENA:cadena
    | CARACTER:caracter
    | BOOLEANO:boolean_
    ;

expresiones ::= expresiones:exprs AMPERSAND expresion:expr
    | expresion:expr
    ;