
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package compiladores_final;

import java_cup.runtime.Symbol;
import java.util.Stack;
import neoscript.p2.Interfaz;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalisisSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolo.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalisisSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalisisSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalisisSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\004\000\002\005\010\000\002" +
    "\007\007\000\002\024\005\000\002\024\003\000\002\006" +
    "\005\000\002\006\011\000\002\025\002\000\002\010\011" +
    "\000\002\011\006\000\002\011\002\000\002\026\002\000" +
    "\002\012\012\000\002\027\002\000\002\013\015\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\004\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\023\005" +
    "\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\014\003\021\012\015\014\006\015\007\044" +
    "\020\001\002\000\020\002\ufffb\003\ufffb\007\ufffb\012\ufffb" +
    "\014\ufffb\015\ufffb\044\ufffb\001\002\000\006\010\136\016" +
    "\137\001\002\000\004\004\uffec\001\002\000\004\004\uffea" +
    "\001\002\000\020\002\ufffa\003\ufffa\007\ufffa\012\ufffa\014" +
    "\ufffa\015\ufffa\044\ufffa\001\002\000\004\002\113\001\002" +
    "\000\016\002\000\003\021\012\015\014\006\015\007\044" +
    "\020\001\002\000\020\002\ufffe\003\ufffe\007\ufffe\012\ufffe" +
    "\014\ufffe\015\ufffe\044\ufffe\001\002\000\020\002\ufffd\003" +
    "\ufffd\007\ufffd\012\ufffd\014\ufffd\015\ufffd\044\ufffd\001\002" +
    "\000\022\004\ufff0\025\ufff0\040\ufff0\041\ufff0\042\ufff0\044" +
    "\ufff0\045\ufff0\046\ufff0\001\002\000\020\002\ufff9\003\ufff9" +
    "\007\ufff9\012\ufff9\014\ufff9\015\ufff9\044\ufff9\001\002\000" +
    "\020\002\ufffc\003\ufffc\007\ufffc\012\ufffc\014\ufffc\015\ufffc" +
    "\044\ufffc\001\002\000\012\010\ufff3\016\ufff3\020\024\031" +
    "\025\001\002\000\004\017\023\001\002\000\020\002\ufff8" +
    "\003\ufff8\007\ufff8\012\ufff8\014\ufff8\015\ufff8\044\ufff8\001" +
    "\002\000\020\002\ufff7\003\ufff7\007\ufff7\012\ufff7\014\ufff7" +
    "\015\ufff7\044\ufff7\001\002\000\004\011\074\001\002\000" +
    "\022\004\034\025\035\040\030\041\031\042\026\044\033" +
    "\045\036\046\027\001\002\000\060\002\uffd8\003\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\012\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\021\uffd8\023\uffd8\024\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\044\uffd8\001\002\000\060\002\uffd6\003\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\012\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6" +
    "\021\uffd6\023\uffd6\024\uffd6\026\uffd6\027\uffd6\030\uffd6\032" +
    "\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\044\uffd6" +
    "\001\002\000\060\002\uffda\003\uffda\005\uffda\006\uffda\007" +
    "\uffda\012\uffda\014\uffda\015\uffda\016\uffda\017\uffda\021\uffda" +
    "\023\uffda\024\uffda\026\uffda\027\uffda\030\uffda\032\uffda\033" +
    "\uffda\034\uffda\035\uffda\036\uffda\037\uffda\044\uffda\001\002" +
    "\000\060\002\uffd9\003\uffd9\005\uffd9\006\uffd9\007\uffd9\012" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\021\uffd9\023\uffd9" +
    "\024\uffd9\026\uffd9\027\uffd9\030\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\044\uffd9\001\002\000\052" +
    "\002\ufff2\003\ufff2\007\ufff2\012\ufff2\014\ufff2\015\ufff2\017" +
    "\ufff2\021\070\023\052\024\040\026\046\027\045\030\050" +
    "\032\047\033\042\034\043\035\041\036\044\037\051\044" +
    "\ufff2\001\002\000\060\002\uffdb\003\uffdb\005\uffdb\006\uffdb" +
    "\007\uffdb\012\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\021" +
    "\uffdb\023\uffdb\024\uffdb\026\uffdb\027\uffdb\030\uffdb\032\uffdb" +
    "\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\044\uffdb\001" +
    "\002\000\022\004\034\025\035\040\030\041\031\042\026" +
    "\044\033\045\036\046\027\001\002\000\022\004\034\025" +
    "\035\040\030\041\031\042\026\044\033\045\036\046\027" +
    "\001\002\000\060\002\uffd7\003\uffd7\005\uffd7\006\uffd7\007" +
    "\uffd7\012\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\021\uffd7" +
    "\023\uffd7\024\uffd7\026\uffd7\027\uffd7\030\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\044\uffd7\001\002" +
    "\000\060\002\uffdf\003\uffdf\005\uffdf\006\uffdf\007\uffdf\012" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\021\uffdf\023\uffdf" +
    "\024\uffdf\026\046\027\045\030\050\032\047\033\042\034" +
    "\043\035\041\036\044\037\051\044\uffdf\001\002\000\022" +
    "\004\034\025\035\040\030\041\031\042\026\044\033\045" +
    "\036\046\027\001\002\000\022\004\034\025\035\040\030" +
    "\041\031\042\026\044\033\045\036\046\027\001\002\000" +
    "\022\004\034\025\035\040\030\041\031\042\026\044\033" +
    "\045\036\046\027\001\002\000\022\004\034\025\035\040" +
    "\030\041\031\042\026\044\033\045\036\046\027\001\002" +
    "\000\022\004\034\025\035\040\030\041\031\042\026\044" +
    "\033\045\036\046\027\001\002\000\022\004\034\025\035" +
    "\040\030\041\031\042\026\044\033\045\036\046\027\001" +
    "\002\000\022\004\034\025\035\040\030\041\031\042\026" +
    "\044\033\045\036\046\027\001\002\000\022\004\034\025" +
    "\035\040\030\041\031\042\026\044\033\045\036\046\027" +
    "\001\002\000\022\004\034\025\035\040\030\041\031\042" +
    "\026\044\033\045\036\046\027\001\002\000\022\004\034" +
    "\025\035\040\030\041\031\042\026\044\033\045\036\046" +
    "\027\001\002\000\022\004\034\025\035\040\030\041\031" +
    "\042\026\044\033\045\036\046\027\001\002\000\060\002" +
    "\uffde\003\uffde\005\uffde\006\uffde\007\uffde\012\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\021\uffde\023\uffde\024\040\026" +
    "\046\027\045\030\050\032\047\033\042\034\043\035\041" +
    "\036\044\037\051\044\uffde\001\002\000\060\002\uffe3\003" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\012\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\017\uffe3\021\uffe3\023\uffe3\024\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\037\uffe3\044\uffe3\001\002\000\060\002\uffe2\003\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\012\uffe2\014\uffe2\015\uffe2\016\uffe2" +
    "\017\uffe2\021\uffe2\023\uffe2\024\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\032\047\033\042\034\043\035\041\036\044\037\051" +
    "\044\uffe2\001\002\000\060\002\uffe8\003\uffe8\005\uffe8\006" +
    "\uffe8\007\uffe8\012\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\021\uffe8\023\uffe8\024\uffe8\026\uffe8\027\uffe8\030\uffe8\032" +
    "\uffe8\033\042\034\043\035\041\036\044\037\051\044\uffe8" +
    "\001\002\000\060\002\uffe0\003\uffe0\005\uffe0\006\uffe0\007" +
    "\uffe0\012\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\021\uffe0" +
    "\023\uffe0\024\uffe0\026\uffe0\027\045\030\050\032\047\033" +
    "\042\034\043\035\041\036\044\037\051\044\uffe0\001\002" +
    "\000\060\002\uffe1\003\uffe1\005\uffe1\006\uffe1\007\uffe1\012" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\021\uffe1\023\uffe1" +
    "\024\uffe1\026\uffe1\027\uffe1\030\uffe1\032\047\033\042\034" +
    "\043\035\041\036\044\037\051\044\uffe1\001\002\000\060" +
    "\002\uffe4\003\uffe4\005\uffe4\006\uffe4\007\uffe4\012\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\021\uffe4\023\uffe4\024\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\037\051\044\uffe4\001\002\000\060\002\uffe7" +
    "\003\uffe7\005\uffe7\006\uffe7\007\uffe7\012\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\021\uffe7\023\uffe7\024\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\032\uffe7\033\042\034\uffe7\035\041\036" +
    "\044\037\051\044\uffe7\001\002\000\060\002\uffe6\003\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\012\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\021\uffe6\023\uffe6\024\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\032\uffe6\033\uffe6\034\uffe6\035\041\036\044\037" +
    "\051\044\uffe6\001\002\000\060\002\uffe5\003\uffe5\005\uffe5" +
    "\006\uffe5\007\uffe5\012\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\021\uffe5\023\uffe5\024\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\044\037\051\044" +
    "\uffe5\001\002\000\060\002\uffdd\003\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\012\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\021" +
    "\uffdd\023\uffdd\024\uffdd\026\046\027\045\030\050\032\047" +
    "\033\042\034\043\035\041\036\044\037\051\044\uffdd\001" +
    "\002\000\032\005\067\023\052\024\040\026\046\027\045" +
    "\030\050\032\047\033\042\034\043\035\041\036\044\037" +
    "\051\001\002\000\060\002\uffdc\003\uffdc\005\uffdc\006\uffdc" +
    "\007\uffdc\012\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\021" +
    "\uffdc\023\uffdc\024\uffdc\026\uffdc\027\uffdc\030\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\044\uffdc\001" +
    "\002\000\022\004\034\025\035\040\030\041\031\042\026" +
    "\044\033\045\036\046\027\001\002\000\032\016\072\023" +
    "\052\024\040\026\046\027\045\030\050\032\047\033\042" +
    "\034\043\035\041\036\044\037\051\001\002\000\022\004" +
    "\034\025\035\040\030\041\031\042\026\044\033\045\036" +
    "\046\027\001\002\000\050\002\ufff1\003\ufff1\007\ufff1\012" +
    "\ufff1\014\ufff1\015\ufff1\017\ufff1\023\052\024\040\026\046" +
    "\027\045\030\050\032\047\033\042\034\043\035\041\036" +
    "\044\037\051\044\ufff1\001\002\000\004\006\075\001\002" +
    "\000\014\003\021\012\015\014\006\015\007\044\020\001" +
    "\002\000\016\003\021\007\100\012\015\014\006\015\007" +
    "\044\020\001\002\000\020\002\uffff\003\uffff\007\uffff\012" +
    "\uffff\014\uffff\015\uffff\044\uffff\001\002\000\020\002\ufff6" +
    "\003\ufff6\007\ufff6\012\ufff6\014\ufff6\015\ufff6\044\ufff6\001" +
    "\002\000\022\004\034\025\035\040\030\041\031\042\026" +
    "\044\033\045\036\046\027\001\002\000\032\006\103\023" +
    "\052\024\040\026\046\027\045\030\050\032\047\033\042" +
    "\034\043\035\041\036\044\037\051\001\002\000\014\003" +
    "\021\012\015\014\006\015\007\044\020\001\002\000\016" +
    "\003\021\007\105\012\015\014\006\015\007\044\020\001" +
    "\002\000\022\002\uffed\003\uffed\007\uffed\012\uffed\013\106" +
    "\014\uffed\015\uffed\044\uffed\001\002\000\004\006\110\001" +
    "\002\000\020\002\uffef\003\uffef\007\uffef\012\uffef\014\uffef" +
    "\015\uffef\044\uffef\001\002\000\014\003\021\012\015\014" +
    "\006\015\007\044\020\001\002\000\016\003\021\007\112" +
    "\012\015\014\006\015\007\044\020\001\002\000\020\002" +
    "\uffee\003\uffee\007\uffee\012\uffee\014\uffee\015\uffee\044\uffee" +
    "\001\002\000\004\002\001\001\002\000\004\004\115\001" +
    "\002\000\004\044\116\001\002\000\004\031\025\001\002" +
    "\000\004\017\120\001\002\000\004\040\121\001\002\000" +
    "\004\017\122\001\002\000\004\040\123\001\002\000\004" +
    "\006\124\001\002\000\014\003\021\012\015\014\006\015" +
    "\007\044\020\001\002\000\016\003\021\007\126\012\015" +
    "\014\006\015\007\044\020\001\002\000\020\002\uffe9\003" +
    "\uffe9\007\uffe9\012\uffe9\014\uffe9\015\uffe9\044\uffe9\001\002" +
    "\000\004\004\130\001\002\000\022\004\034\025\035\040" +
    "\030\041\031\042\026\044\033\045\036\046\027\001\002" +
    "\000\032\005\132\023\052\024\040\026\046\027\045\030" +
    "\050\032\047\033\042\034\043\035\041\036\044\037\051" +
    "\001\002\000\004\006\133\001\002\000\014\003\021\012" +
    "\015\014\006\015\007\044\020\001\002\000\016\003\021" +
    "\007\135\012\015\014\006\015\007\044\020\001\002\000" +
    "\020\002\uffeb\003\uffeb\007\uffeb\012\uffeb\014\uffeb\015\uffeb" +
    "\044\uffeb\001\002\000\004\044\143\001\002\000\004\043" +
    "\140\001\002\000\004\031\141\001\002\000\022\004\034" +
    "\025\035\040\030\041\031\042\026\044\033\045\036\046" +
    "\027\001\002\000\046\002\ufff5\003\ufff5\007\ufff5\012\ufff5" +
    "\014\ufff5\015\ufff5\023\052\024\040\026\046\027\045\030" +
    "\050\032\047\033\042\034\043\035\041\036\044\037\051" +
    "\044\ufff5\001\002\000\006\010\ufff4\016\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\026\002\010\003\011\004\012\005\021\006" +
    "\013\007\016\010\003\012\007\013\015\024\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\126\001" +
    "\001\000\004\027\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\076\005\021\006\013\007\016\010" +
    "\003\012\007\013\015\024\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\065\001\001\000\004\022\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\064\001\001\000\004\022\063\001\001\000\004\022\062" +
    "\001\001\000\004\022\061\001\001\000\004\022\060\001" +
    "\001\000\004\022\057\001\001\000\004\022\056\001\001" +
    "\000\004\022\055\001\001\000\004\022\054\001\001\000" +
    "\004\022\053\001\001\000\004\022\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\070\001\001\000\002\001\001\000\004\022\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\075" +
    "\004\012\005\021\006\013\007\016\010\003\012\007\013" +
    "\015\024\004\001\001\000\022\004\076\005\021\006\013" +
    "\007\016\010\003\012\007\013\015\024\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\101\001\001" +
    "\000\002\001\001\000\024\003\103\004\012\005\021\006" +
    "\013\007\016\010\003\012\007\013\015\024\004\001\001" +
    "\000\022\004\076\005\021\006\013\007\016\010\003\012" +
    "\007\013\015\024\004\001\001\000\004\011\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\110\004" +
    "\012\005\021\006\013\007\016\010\003\012\007\013\015" +
    "\024\004\001\001\000\022\004\076\005\021\006\013\007" +
    "\016\010\003\012\007\013\015\024\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\124\004\012\005\021\006\013\007\016" +
    "\010\003\012\007\013\015\024\004\001\001\000\022\004" +
    "\076\005\021\006\013\007\016\010\003\012\007\013\015" +
    "\024\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\133\004\012\005\021\006\013\007\016\010" +
    "\003\012\007\013\015\024\004\001\001\000\022\004\076" +
    "\005\021\006\013\007\016\010\003\012\007\013\015\024" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\141\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalisisSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalisisSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalisisSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo instrucciones;
    
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en simbolo: "+s.value+", "+s.left+", "+s.right);
        Interfaz.notificar_err("Error sintactico en simbolo: "+s.value+", linea "+s.left+", columna "+s.right);
    }

    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico en simbolo: "+s.value+", "+s.left+", "+s.right);
        Interfaz.notificar_err("Error sintactico en simbolo: "+s.value+", linea "+s.left+", columna "+s.right);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalisisSintactico$actions {


    Stack <String> ambito = new Stack <String>();
    int contadorSentencia = 0;

    private Nodo transforma_Switch_If(Nodo switchExpr, Nodo casesNode) {
        // Verifica si el nodo "Cases" con multiples nodos
        if (casesNode.valor.equals("cases")) {
            // obtiene los nodos hijos
            Nodo prevCases = casesNode.hijos.get(0);
            Nodo currentCase = casesNode.hijos.get(1);
            
            // Obtiene las expresiones y las instrucciones
            Nodo caseExpr = currentCase.hijos.get(0);
            Nodo caseInsts = currentCase.hijos.get(1);
            
            // Crea el nodo de comparacion del if
            Nodo comparison = new Nodo("==");
            comparison.hijos.add(switchExpr);
            comparison.hijos.add(caseExpr);
            
            // Crea el nodo If del case actual
            Nodo ifNode = new Nodo("if");
            ifNode.hijos.add(comparison);
            ifNode.hijos.add(caseInsts);
            
            // Agrega el nodo Else, segun los siguientes Case de forma recursiva
            Nodo elseNode = transforma_Switch_If(switchExpr, prevCases);
            Nodo insts = new Nodo("instrucciones");
            insts.hijos.add(elseNode);
            ifNode.hijos.add(insts);
            
            return ifNode;
        } 
        // Valida si es un solo case
        else if (casesNode.valor.equals("case1")) {
            Nodo caseNode = casesNode.hijos.get(0);
            Nodo caseExpr = caseNode.hijos.get(0);
            Nodo caseInsts = caseNode.hijos.get(1);
            
            // Crea el nodo de comparacion del if
            Nodo comparison = new Nodo("==");
            comparison.hijos.add(switchExpr);
            comparison.hijos.add(caseExpr);
            
            // Crea el nodo If del case actual
            Nodo ifNode = new Nodo("if");
            ifNode.hijos.add(comparison);
            ifNode.hijos.add(caseInsts);
            
            return ifNode;
        }
        // Valida si tiene nodo default
        else if (casesNode.valor.equals("default")) {
            Nodo caseNode = casesNode.hijos.get(0);
            Nodo caseExpr = caseNode.hijos.get(0);
            Nodo caseInsts = caseNode.hijos.get(1);
            
            // Crea el nodo de comparacion del if
            Nodo comparison = new Nodo("==");
            comparison.hijos.add(switchExpr);
            comparison.hijos.add(caseExpr);

            // Crea el nodo default 
            Nodo defaultNode = casesNode.hijos.get(1);
            Nodo defaultInsts = defaultNode.hijos.get(0);
            
            // Crea el nodo If del case y le agrega como else el nodo default
            Nodo ifNode = new Nodo("if");
            ifNode.hijos.add(comparison);
            ifNode.hijos.add(caseInsts);
            ifNode.hijos.add(defaultInsts);
                        
            return ifNode;
        }
        
        return new Nodo("error al transformar switch");
    }

  private final AnalisisSintactico parser;

  /** Constructor */
  CUP$AnalisisSintactico$actions(AnalisisSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalisisSintactico$do_action_part00000000(
    int                        CUP$AnalisisSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisisSintactico$parser,
    java.util.Stack            CUP$AnalisisSintactico$stack,
    int                        CUP$AnalisisSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalisisSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalisisSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalisisSintactico$parser.done_parsing();
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              Object RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
parser.instrucciones = insts;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              Nodo RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = insts;
nodo.hijos.add(inst);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("Instruccion");
nodo.hijos.add(inst);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= asignacion 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= declaracion 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= if 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= while 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= for 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= clase 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= error PUNTO_COMA 
            {
              Nodo RESULT =null;
		
Nodo n = new Nodo("Error");
RESULT = n;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // clase ::= ID AMPERSAND CLASE LLAVE_ABIERTO instrucciones LLAVE_CERRADO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		


              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("clase",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= ids DOS_PUNTOS TIPO IGUAL expresion 
            {
              Nodo RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Nodo ids = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodoId = new Nodo("variables");
nodoId.hijos.add(ids);
nodoId.hijos.add(new Nodo(tipo));
if(ambito.isEmpty()) {
nodoId.hijos.add(new Nodo(""));
} else {
nodoId.hijos.add(new Nodo(ambito.peek()));
}
Nodo inst = new Nodo("declaracion");
inst.hijos.add(nodoId);
inst.hijos.add(expr);
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ids ::= ids COMA ID 
            {
              Nodo RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo ids = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = ids;
nodo.hijos.add(new Nodo(id));
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ids",18, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ids ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("ids");
nodo.hijos.add(new Nodo(id));
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ids",18, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // asignacion ::= ID IGUAL expresion 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodoId = new Nodo("variable");
nodoId.hijos.add(new Nodo(id));
Nodo inst = new Nodo("asignacion");
inst.hijos.add(nodoId);
inst.hijos.add(expr);
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // asignacion ::= ID IGUAL expresion TERNARIO expresion DOS_PUNTOS expresion 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr3left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr3right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr3 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodoId = new Nodo("variable");
nodoId.hijos.add(new Nodo(id));
Nodo ternario = new Nodo("ternario");
ternario.hijos.add(expr);
ternario.hijos.add(expr2);
ternario.hijos.add(expr3);
Nodo inst = new Nodo("asignacion");
inst.hijos.add(nodoId);
inst.hijos.add(ternario);
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$0 ::= 
            {
              Nodo RESULT =null;
 
        contadorSentencia++;
        if(ambito.isEmpty()){
            ambito.add("si"+contadorSentencia);
        } else {
            ambito.add(ambito.peek()+".si"+contadorSentencia);
        }
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",19, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // if ::= IF NT$0 expresion LLAVE_ABIERTO instrucciones LLAVE_CERRADO if_else_part 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int elsepartleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int elsepartright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo elsepart = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("if");
    nodo.hijos.add(expr);
    nodo.hijos.add(insts);
    if (elsepart != null) {
        nodo.hijos.add(elsepart);
    }
    RESULT = nodo;
    ambito.pop();

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("if",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // if_else_part ::= ELSE LLAVE_ABIERTO instrucciones LLAVE_CERRADO 
            {
              Nodo RESULT =null;
		int insts2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int insts2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
    RESULT = insts2;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("if_else_part",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // if_else_part ::= 
            {
              Nodo RESULT =null;
		
    RESULT = null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("if_else_part",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$1 ::= 
            {
              Nodo RESULT =null;
 
        contadorSentencia++;
        if(ambito.isEmpty()){
            ambito.add("mientras"+contadorSentencia);
        } else {
            ambito.add(ambito.peek()+".mientras"+contadorSentencia);
        }
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",20, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // while ::= WHILE NT$1 PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO LLAVE_ABIERTO instrucciones LLAVE_CERRADO 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("while");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;
ambito.pop();

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("while",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$2 ::= 
            {
              Nodo RESULT =null;
 
        contadorSentencia++;
        if(ambito.isEmpty()){
            ambito.add("para"+contadorSentencia);
        } else {
            ambito.add(ambito.peek()+".para"+contadorSentencia);
        }
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("NT$2",21, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // for ::= FOR NT$2 PARENTESIS_ABIERTO asignacion PUNTO_COMA ENTERO PUNTO_COMA ENTERO LLAVE_ABIERTO instrucciones LLAVE_CERRADO 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)).value;
		int inicialeft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).left;
		int iniciaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).right;
		Nodo inicia = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).value;
		int comparaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int compararight = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		String compara = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int saltoleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int saltoright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		String salto = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		


              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("for",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= expresion MAS expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("+");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= expresion MENOS expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("-");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= expresion ASTERISCO expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("*");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= expresion SLASH expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("/");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= expresion POTENCIA expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("^");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= expresion MODULO expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("%");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= expresion MAYOR expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo(">");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= expresion MENOR expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("<");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= expresion IGUAL_IGUAL expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("==");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= NOT expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("not");
nodo.hijos.add(expr);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion OR expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("or");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion AND expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("and");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
RESULT = expr;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("variable");
nodo.hijos.add(new Nodo(id));
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= ENTERO 
            {
              Nodo RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("int");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(entero));
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= DOUBLE 
            {
              Nodo RESULT =null;
		int double_left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int double_right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String double_ = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("double");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(double_));
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= CADENA 
            {
              Nodo RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("string");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(cadena));
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= CARACTER 
            {
              Nodo RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("char");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(caracter));
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= BOOLEANO 
            {
              Nodo RESULT =null;
		int boolean_left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int boolean_right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String boolean_ = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("boolean");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(boolean_));
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresiones ::= expresiones AMPERSAND expresion 
            {
              Nodo RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo exprs = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = exprs;
nodo.hijos.add(expr);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresiones",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresiones ::= expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("Expresion");
nodo.hijos.add(expr);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresiones",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalisisSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalisisSintactico$do_action(
    int                        CUP$AnalisisSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisisSintactico$parser,
    java.util.Stack            CUP$AnalisisSintactico$stack,
    int                        CUP$AnalisisSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalisisSintactico$do_action_part00000000(
                               CUP$AnalisisSintactico$act_num,
                               CUP$AnalisisSintactico$parser,
                               CUP$AnalisisSintactico$stack,
                               CUP$AnalisisSintactico$top);
    }
}

}
