
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package compiladores_final;

import java_cup.runtime.Symbol;
import java.util.Stack;
import compiladores_final.Interfaz;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalisisSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolo.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalisisSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalisisSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalisisSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\003\000\002\006" +
    "\004\000\002\006\003\000\002\037\002\000\002\005\011" +
    "\000\002\027\004\000\002\027\003\000\002\030\004\000" +
    "\002\030\003\000\002\040\002\000\002\041\002\000\002" +
    "\031\016\000\002\036\005\000\002\036\002\000\002\032" +
    "\003\000\002\032\003\000\002\003\004\000\002\003\003" +
    "\000\002\004\004\000\002\004\004\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\004\000\002" +
    "\010\007\000\002\010\005\000\002\033\003\000\002\033" +
    "\003\000\002\025\005\000\002\025\003\000\002\034\003" +
    "\000\002\034\002\000\002\035\007\000\002\035\005\000" +
    "\002\007\005\000\002\007\011\000\002\042\002\000\002" +
    "\011\013\000\002\043\002\000\002\012\007\000\002\012" +
    "\002\000\002\044\002\000\002\013\012\000\002\045\002" +
    "\000\002\014\015\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\004\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\024\005\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\004\046\004\001\002\000\004\016\012\001" +
    "\002\000\006\002\000\046\004\001\002\000\004\002\010" +
    "\001\002\000\006\002\ufffe\046\ufffe\001\002\000\004\002" +
    "\001\001\002\000\006\002\uffff\046\uffff\001\002\000\004" +
    "\011\013\001\002\000\004\006\ufffd\001\002\000\004\006" +
    "\015\001\002\000\004\046\016\001\002\000\010\004\ufff7" +
    "\010\uffe3\016\uffe3\001\002\000\006\007\077\046\016\001" +
    "\002\000\006\007\ufffa\046\ufffa\001\002\000\006\007\ufff8" +
    "\046\ufff8\001\002\000\006\010\025\016\026\001\002\000" +
    "\004\017\024\001\002\000\006\007\ufff9\046\ufff9\001\002" +
    "\000\004\046\075\001\002\000\006\045\031\046\027\001" +
    "\002\000\006\017\uffe5\031\uffe5\001\002\000\006\017\uffe7" +
    "\031\032\001\002\000\006\017\uffe6\031\uffe6\001\002\000" +
    "\022\004\041\025\042\042\035\043\036\044\033\046\040" +
    "\047\043\050\034\001\002\000\042\005\uffc3\006\uffc3\016" +
    "\uffc3\017\uffc3\021\uffc3\023\uffc3\024\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\001\002\000\042\005\uffc1\006\uffc1\016\uffc1\017\uffc1" +
    "\021\uffc1\023\uffc1\024\uffc1\026\uffc1\027\uffc1\030\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\001\002" +
    "\000\042\005\uffc5\006\uffc5\016\uffc5\017\uffc5\021\uffc5\023" +
    "\uffc5\024\uffc5\026\uffc5\027\uffc5\030\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\035\uffc5\036\uffc5\037\uffc5\001\002\000\042\005" +
    "\uffc4\006\uffc4\016\uffc4\017\uffc4\021\uffc4\023\uffc4\024\uffc4" +
    "\026\uffc4\027\uffc4\030\uffc4\032\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\001\002\000\032\017\uffe8\023\057" +
    "\024\045\026\053\027\052\030\055\032\054\033\047\034" +
    "\050\035\046\036\051\037\056\001\002\000\042\005\uffc6" +
    "\006\uffc6\016\uffc6\017\uffc6\021\uffc6\023\uffc6\024\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\001\002\000\022\004\041\025\042\042" +
    "\035\043\036\044\033\046\040\047\043\050\034\001\002" +
    "\000\022\004\041\025\042\042\035\043\036\044\033\046" +
    "\040\047\043\050\034\001\002\000\042\005\uffc2\006\uffc2" +
    "\016\uffc2\017\uffc2\021\uffc2\023\uffc2\024\uffc2\026\uffc2\027" +
    "\uffc2\030\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\001\002\000\042\005\uffca\006\uffca\016\uffca\017" +
    "\uffca\021\uffca\023\uffca\024\uffca\026\053\027\052\030\055" +
    "\032\054\033\047\034\050\035\046\036\051\037\056\001" +
    "\002\000\022\004\041\025\042\042\035\043\036\044\033" +
    "\046\040\047\043\050\034\001\002\000\022\004\041\025" +
    "\042\042\035\043\036\044\033\046\040\047\043\050\034" +
    "\001\002\000\022\004\041\025\042\042\035\043\036\044" +
    "\033\046\040\047\043\050\034\001\002\000\022\004\041" +
    "\025\042\042\035\043\036\044\033\046\040\047\043\050" +
    "\034\001\002\000\022\004\041\025\042\042\035\043\036" +
    "\044\033\046\040\047\043\050\034\001\002\000\022\004" +
    "\041\025\042\042\035\043\036\044\033\046\040\047\043" +
    "\050\034\001\002\000\022\004\041\025\042\042\035\043" +
    "\036\044\033\046\040\047\043\050\034\001\002\000\022" +
    "\004\041\025\042\042\035\043\036\044\033\046\040\047" +
    "\043\050\034\001\002\000\022\004\041\025\042\042\035" +
    "\043\036\044\033\046\040\047\043\050\034\001\002\000" +
    "\022\004\041\025\042\042\035\043\036\044\033\046\040" +
    "\047\043\050\034\001\002\000\022\004\041\025\042\042" +
    "\035\043\036\044\033\046\040\047\043\050\034\001\002" +
    "\000\042\005\uffc9\006\uffc9\016\uffc9\017\uffc9\021\uffc9\023" +
    "\uffc9\024\045\026\053\027\052\030\055\032\054\033\047" +
    "\034\050\035\046\036\051\037\056\001\002\000\042\005" +
    "\uffce\006\uffce\016\uffce\017\uffce\021\uffce\023\uffce\024\uffce" +
    "\026\uffce\027\uffce\030\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\001\002\000\042\005\uffcd\006\uffcd" +
    "\016\uffcd\017\uffcd\021\uffcd\023\uffcd\024\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\032\054\033\047\034\050\035\046\036\051" +
    "\037\056\001\002\000\042\005\uffd3\006\uffd3\016\uffd3\017" +
    "\uffd3\021\uffd3\023\uffd3\024\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\032\uffd3\033\047\034\050\035\046\036\051\037\056\001" +
    "\002\000\042\005\uffcb\006\uffcb\016\uffcb\017\uffcb\021\uffcb" +
    "\023\uffcb\024\uffcb\026\uffcb\027\052\030\055\032\054\033" +
    "\047\034\050\035\046\036\051\037\056\001\002\000\042" +
    "\005\uffcc\006\uffcc\016\uffcc\017\uffcc\021\uffcc\023\uffcc\024" +
    "\uffcc\026\uffcc\027\uffcc\030\uffcc\032\054\033\047\034\050" +
    "\035\046\036\051\037\056\001\002\000\042\005\uffcf\006" +
    "\uffcf\016\uffcf\017\uffcf\021\uffcf\023\uffcf\024\uffcf\026\uffcf" +
    "\027\uffcf\030\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\037\056\001\002\000\042\005\uffd2\006\uffd2\016\uffd2" +
    "\017\uffd2\021\uffd2\023\uffd2\024\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\032\uffd2\033\047\034\uffd2\035\046\036\051\037\056" +
    "\001\002\000\042\005\uffd1\006\uffd1\016\uffd1\017\uffd1\021" +
    "\uffd1\023\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\046\036\051\037\056\001\002\000" +
    "\042\005\uffd0\006\uffd0\016\uffd0\017\uffd0\021\uffd0\023\uffd0" +
    "\024\uffd0\026\uffd0\027\uffd0\030\uffd0\032\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\036\051\037\056\001\002\000\042\005\uffc8" +
    "\006\uffc8\016\uffc8\017\uffc8\021\uffc8\023\uffc8\024\uffc8\026" +
    "\053\027\052\030\055\032\054\033\047\034\050\035\046" +
    "\036\051\037\056\001\002\000\032\005\074\023\057\024" +
    "\045\026\053\027\052\030\055\032\054\033\047\034\050" +
    "\035\046\036\051\037\056\001\002\000\042\005\uffc7\006" +
    "\uffc7\016\uffc7\017\uffc7\021\uffc7\023\uffc7\024\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\001\002\000\006\010\uffe4\016\uffe4\001\002" +
    "\000\006\007\ufffb\046\ufffb\001\002\000\006\002\ufffc\046" +
    "\ufffc\001\002\000\004\004\101\001\002\000\006\005\uffe1" +
    "\046\102\001\002\000\004\016\212\001\002\000\006\005" +
    "\uffe2\010\206\001\002\000\004\005\105\001\002\000\004" +
    "\016\106\001\002\000\006\040\111\045\110\001\002\000" +
    "\004\006\ufff6\001\002\000\004\006\ufff2\001\002\000\004" +
    "\006\ufff1\001\002\000\004\006\113\001\002\000\014\003" +
    "\127\012\123\014\115\015\116\046\126\001\002\000\020" +
    "\003\uffec\007\uffec\012\uffec\014\uffec\015\uffec\041\uffec\046" +
    "\uffec\001\002\000\004\004\uffd7\001\002\000\004\004\uffd5" +
    "\001\002\000\020\003\uffeb\007\uffeb\012\uffeb\014\uffeb\015" +
    "\uffeb\041\uffeb\046\uffeb\001\002\000\020\003\127\007\ufff3" +
    "\012\123\014\115\015\116\041\160\046\126\001\002\000" +
    "\020\003\uffef\007\uffef\012\uffef\014\uffef\015\uffef\041\uffef" +
    "\046\uffef\001\002\000\004\017\156\001\002\000\004\004" +
    "\uffdc\001\002\000\020\003\uffea\007\uffea\012\uffea\014\uffea" +
    "\015\uffea\041\uffea\046\uffea\001\002\000\004\017\137\001" +
    "\002\000\010\010\uffe3\016\uffe3\031\131\001\002\000\004" +
    "\017\130\001\002\000\020\003\uffe9\007\uffe9\012\uffe9\014" +
    "\uffe9\015\uffe9\041\uffe9\046\uffe9\001\002\000\022\004\041" +
    "\025\042\042\035\043\036\044\033\046\040\047\043\050" +
    "\034\001\002\000\036\006\uffde\017\uffde\021\133\023\057" +
    "\024\045\026\053\027\052\030\055\032\054\033\047\034" +
    "\050\035\046\036\051\037\056\001\002\000\022\004\041" +
    "\025\042\042\035\043\036\044\033\046\040\047\043\050" +
    "\034\001\002\000\032\016\135\023\057\024\045\026\053" +
    "\027\052\030\055\032\054\033\047\034\050\035\046\036" +
    "\051\037\056\001\002\000\022\004\041\025\042\042\035" +
    "\043\036\044\033\046\040\047\043\050\034\001\002\000" +
    "\034\006\uffdd\017\uffdd\023\057\024\045\026\053\027\052" +
    "\030\055\032\054\033\047\034\050\035\046\036\051\037" +
    "\056\001\002\000\020\003\uffed\007\uffed\012\uffed\014\uffed" +
    "\015\uffed\041\uffed\046\uffed\001\002\000\004\004\141\001" +
    "\002\000\022\004\041\025\042\042\035\043\036\044\033" +
    "\046\040\047\043\050\034\001\002\000\032\005\143\023" +
    "\057\024\045\026\053\027\052\030\055\032\054\033\047" +
    "\034\050\035\046\036\051\037\056\001\002\000\004\006" +
    "\144\001\002\000\014\003\127\012\123\014\115\015\116" +
    "\046\126\001\002\000\016\003\127\007\147\012\123\014" +
    "\115\015\116\046\126\001\002\000\020\003\ufff0\007\ufff0" +
    "\012\ufff0\014\ufff0\015\ufff0\041\ufff0\046\ufff0\001\002\000" +
    "\022\003\uffd8\007\uffd8\012\uffd8\013\150\014\uffd8\015\uffd8" +
    "\041\uffd8\046\uffd8\001\002\000\004\006\uffda\001\002\000" +
    "\020\003\uffdb\007\uffdb\012\uffdb\014\uffdb\015\uffdb\041\uffdb" +
    "\046\uffdb\001\002\000\004\006\153\001\002\000\014\003" +
    "\127\012\123\014\115\015\116\046\126\001\002\000\016" +
    "\003\127\007\155\012\123\014\115\015\116\046\126\001" +
    "\002\000\020\003\uffd9\007\uffd9\012\uffd9\014\uffd9\015\uffd9" +
    "\041\uffd9\046\uffd9\001\002\000\020\003\uffee\007\uffee\012" +
    "\uffee\014\uffee\015\uffee\041\uffee\046\uffee\001\002\000\004" +
    "\007\163\001\002\000\004\046\161\001\002\000\004\017" +
    "\162\001\002\000\004\007\ufff4\001\002\000\006\007\ufff5" +
    "\046\ufff5\001\002\000\004\004\165\001\002\000\004\046" +
    "\166\001\002\000\004\031\131\001\002\000\004\017\170" +
    "\001\002\000\022\004\041\025\042\042\035\043\036\044" +
    "\033\046\040\047\043\050\034\001\002\000\032\017\172" +
    "\023\057\024\045\026\053\027\052\030\055\032\054\033" +
    "\047\034\050\035\046\036\051\037\056\001\002\000\004" +
    "\046\166\001\002\000\004\006\174\001\002\000\014\003" +
    "\127\012\123\014\115\015\116\046\126\001\002\000\016" +
    "\003\127\007\176\012\123\014\115\015\116\046\126\001" +
    "\002\000\020\003\uffd4\007\uffd4\012\uffd4\014\uffd4\015\uffd4" +
    "\041\uffd4\046\uffd4\001\002\000\004\004\200\001\002\000" +
    "\022\004\041\025\042\042\035\043\036\044\033\046\040" +
    "\047\043\050\034\001\002\000\032\005\202\023\057\024" +
    "\045\026\053\027\052\030\055\032\054\033\047\034\050" +
    "\035\046\036\051\037\056\001\002\000\004\006\203\001" +
    "\002\000\014\003\127\012\123\014\115\015\116\046\126" +
    "\001\002\000\016\003\127\007\205\012\123\014\115\015" +
    "\116\046\126\001\002\000\020\003\uffd6\007\uffd6\012\uffd6" +
    "\014\uffd6\015\uffd6\041\uffd6\046\uffd6\001\002\000\004\046" +
    "\207\001\002\000\004\016\210\001\002\000\004\045\211" +
    "\001\002\000\006\005\uffe0\010\uffe0\001\002\000\004\045" +
    "\213\001\002\000\006\005\uffdf\010\uffdf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\010\002\005\005\006\006\004\001\001\000" +
    "\002\001\001\000\004\005\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\013\001\001\000\002\001\001" +
    "\000\014\010\022\025\021\027\016\030\017\031\020\001" +
    "\001\000\004\040\077\001\001\000\012\010\022\025\021" +
    "\030\075\031\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\072\001\001\000\004\023\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\071\001\001" +
    "\000\004\023\070\001\001\000\004\023\067\001\001\000" +
    "\004\023\066\001\001\000\004\023\065\001\001\000\004" +
    "\023\064\001\001\000\004\023\063\001\001\000\004\023" +
    "\062\001\001\000\004\023\061\001\001\000\004\023\060" +
    "\001\001\000\004\023\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\103\035\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\106" +
    "\001\001\000\004\041\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\117\004\120" +
    "\007\121\010\124\011\113\013\116\014\123\025\021\001" +
    "\001\000\002\001\001\000\004\044\176\001\001\000\004" +
    "\045\163\001\001\000\002\001\001\000\022\004\145\007" +
    "\121\010\124\011\113\013\116\014\123\025\021\036\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\131\001\001\000\002\001\001\000\004\023\133\001\001" +
    "\000\002\001\001\000\004\023\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\144\004\120\007\121\010\124\011\113\013\116\014\123" +
    "\025\021\001\001\000\020\004\145\007\121\010\124\011" +
    "\113\013\116\014\123\025\021\001\001\000\002\001\001" +
    "\000\004\012\150\001\001\000\004\043\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\153\004\120" +
    "\007\121\010\124\011\113\013\116\014\123\025\021\001" +
    "\001\000\020\004\145\007\121\010\124\011\113\013\116" +
    "\014\123\025\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\170\001\001\000\002\001\001\000\004\007" +
    "\172\001\001\000\002\001\001\000\022\003\174\004\120" +
    "\007\121\010\124\011\113\013\116\014\123\025\021\001" +
    "\001\000\020\004\145\007\121\010\124\011\113\013\116" +
    "\014\123\025\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\203\004\120\007\121\010\124\011" +
    "\113\013\116\014\123\025\021\001\001\000\020\004\145" +
    "\007\121\010\124\011\113\013\116\014\123\025\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalisisSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalisisSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalisisSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public TablaSimbolos instrucciones;
    
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en simbolo: "+s.value+", "+s.left+", "+s.right);
        Interfaz.notificar_err("Error sintactico en simbolo: "+s.value+", linea "+s.left+", columna "+s.right);
    }

    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico en simbolo: "+s.value+", "+s.left+", "+s.right);
        Interfaz.notificar_err("Error sintactico en simbolo: "+s.value+", linea "+s.left+", columna "+s.right);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalisisSintactico$actions {


    Stack <String> ambito = new Stack <String>();
    int contadorSentencia = 0;

    TablaSimbolos tablaSimbolos = new TablaSimbolos();

  private final AnalisisSintactico parser;

  /** Constructor */
  CUP$AnalisisSintactico$actions(AnalisisSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalisisSintactico$do_action_part00000000(
    int                        CUP$AnalisisSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisisSintactico$parser,
    java.util.Stack            CUP$AnalisisSintactico$stack,
    int                        CUP$AnalisisSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalisisSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalisisSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalisisSintactico$parser.done_parsing();
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= clases 
            {
              Object RESULT =null;
		int clasesleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int clasesright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object clases = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
parser.instrucciones = tablaSimbolos;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // clases ::= clases clase 
            {
              Object RESULT =null;
		int clasesleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int clasesright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Object clases = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int claseleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object clase = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("clases",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // clases ::= clase 
            {
              Object RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object clase = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("clases",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
 
        tablaSimbolos.agregarSimbolo(id, "clase", 0);
        tablaSimbolos.entrarAmbito(id); 
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",29, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // clase ::= ID DOS_PUNTOS CLASE NT$0 LLAVE_ABIERTO declaraciones LLAVE_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		
        tablaSimbolos.salirAmbito();
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("clase",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones ::= declaraciones tipodeclaracion 
            {
              Object RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",21, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciones ::= tipodeclaracion 
            {
              Object RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",21, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipodeclaracion ::= declaracion PUNTO_COMA 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("tipodeclaracion",22, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipodeclaracion ::= metodo 
            {
              Object RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("tipodeclaracion",22, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

        tablaSimbolos.entrarAmbito(tablaSimbolos.getAmbitoActual() + "." + id);
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",30, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int tipomethodleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int tipomethodright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object tipomethod = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

        tablaSimbolos.salirAmbito();
        tablaSimbolos.agregarSimbolo(id, (String)tipomethod+"()", 0);
        tablaSimbolos.entrarAmbito(tablaSimbolos.getAmbitoActual() + "." + id);
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("NT$2",31, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // metodo ::= ID NT$1 PARENTESIS_ABIERTO declaraparam PARENTESIS_CERRADO DOS_PUNTOS tipometodo NT$2 LLAVE_ABIERTO instrucciones retorno LLAVE_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-11)).value;
		int tipomethodleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int tipomethodright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Object tipomethod = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Object insts = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
        tablaSimbolos.salirAmbito();
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("metodo",23, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // retorno ::= RETURN ID PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("retorno",28, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // retorno ::= 
            {
              Object RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("retorno",28, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipometodo ::= TIPO 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 RESULT=tipo; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("tipometodo",24, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipometodo ::= VOID 
            {
              Object RESULT =null;
		int vacioleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int vacioright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object vacio = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 RESULT="void"; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("tipometodo",24, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Object insts = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instrucciones ::= instruccion 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= asignacion PUNTO_COMA 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= declaracion PUNTO_COMA 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= if 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= while 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= for 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= error PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion ::= ids DOS_PUNTOS tipovar IGUAL expresion 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    for (String var : (List<String>)ids) {
        tablaSimbolos.agregarSimbolo(var, (String)tipo, 1);
    }

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion ::= ids DOS_PUNTOS tipovar 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    for (String var : (List<String>)ids) {
        tablaSimbolos.agregarSimbolo(var, (String)tipo, 1);
    }

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipovar ::= TIPO 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 RESULT=tipo; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("tipovar",25, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipovar ::= ID 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 RESULT=tipo; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("tipovar",25, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ids ::= ids COMA ID 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    ((List<String>)ids).add((String)id);
    RESULT = ids;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ids",19, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ids ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    List<String> lista = new ArrayList<>();
    lista.add((String)id);
    RESULT = lista;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("ids",19, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaraparam ::= idsparam 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("declaraparam",26, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaraparam ::= 
            {
              Object RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("declaraparam",26, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // idsparam ::= idsparam COMA ID DOS_PUNTOS TIPO 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    tablaSimbolos.agregarSimbolo(id, tipo, 1);

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("idsparam",27, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // idsparam ::= ID DOS_PUNTOS TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    tablaSimbolos.agregarSimbolo(id, tipo, 1);

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("idsparam",27, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignacion ::= ID IGUAL expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asignacion ::= ID IGUAL expresion TERNARIO expresion DOS_PUNTOS expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr3left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr3right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object expr3 = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$3 ::= 
            {
              Object RESULT =null;

        contadorSentencia++;
        tablaSimbolos.entrarAmbito(tablaSimbolos.getAmbitoActual() + ".if" + contadorSentencia);
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("NT$3",32, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // if ::= IF NT$3 PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO LLAVE_ABIERTO instrucciones LLAVE_CERRADO if_else_part 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Object insts = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int elsepartleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int elsepartright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object elsepart = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
        tablaSimbolos.salirAmbito();
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("if",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$4 ::= 
            {
              Object RESULT =null;

        tablaSimbolos.salirAmbito();
        tablaSimbolos.entrarAmbito(tablaSimbolos.getAmbitoActual() + ".else" + contadorSentencia);
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("NT$4",33, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // if_else_part ::= ELSE NT$4 LLAVE_ABIERTO instrucciones LLAVE_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int insts2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int insts2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Object insts2 = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("if_else_part",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // if_else_part ::= 
            {
              Object RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("if_else_part",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$5 ::= 
            {
              Object RESULT =null;

        contadorSentencia++;
        tablaSimbolos.entrarAmbito(tablaSimbolos.getAmbitoActual() + ".while" + contadorSentencia);
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("NT$5",34, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // while ::= WHILE NT$5 PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO LLAVE_ABIERTO instrucciones LLAVE_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Object insts = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        tablaSimbolos.salirAmbito();
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("while",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$6 ::= 
            {
              Object RESULT =null;

        contadorSentencia++;
        tablaSimbolos.entrarAmbito(tablaSimbolos.getAmbitoActual() + ".for" + contadorSentencia);
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("NT$6",35, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // for ::= FOR NT$6 PARENTESIS_ABIERTO asignacion PUNTO_COMA expresion PUNTO_COMA asignacion LLAVE_ABIERTO instrucciones LLAVE_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)).value;
		int inicialeft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).left;
		int iniciaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).right;
		Object inicia = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).value;
		int comparaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int compararight = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Object compara = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int saltoleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int saltoright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Object salto = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Object insts = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
        tablaSimbolos.salirAmbito();
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("for",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion ASTERISCO expresion 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion SLASH expresion 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion POTENCIA expresion 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion MODULO expresion 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion MAYOR expresion 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion MENOR expresion 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= expresion IGUAL_IGUAL expresion 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= NOT expresion 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= expresion OR expresion 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= expresion AND expresion 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= DOUBLE 
            {
              Object RESULT =null;
		int double_left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int double_right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String double_ = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= CARACTER 
            {
              Object RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= BOOLEANO 
            {
              Object RESULT =null;
		int boolean_left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int boolean_right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String boolean_ = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresiones ::= expresiones AMPERSAND expresion 
            {
              Object RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Object exprs = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresiones",18, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresiones ::= expresion 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresiones",18, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalisisSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalisisSintactico$do_action(
    int                        CUP$AnalisisSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisisSintactico$parser,
    java.util.Stack            CUP$AnalisisSintactico$stack,
    int                        CUP$AnalisisSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalisisSintactico$do_action_part00000000(
                               CUP$AnalisisSintactico$act_num,
                               CUP$AnalisisSintactico$parser,
                               CUP$AnalisisSintactico$stack,
                               CUP$AnalisisSintactico$top);
    }
}

}
