package neoscript.p2;
import java_cup.runtime.Symbol;
import java.util.Stack;
import neoscript.p2.Interfaz;

parser code
{:
    public Nodo instrucciones;
    
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en simbolo: "+s.value+", "+s.left+", "+s.right);
        Interfaz.notificar_err("Error sintactico en simbolo: "+s.value+", linea "+s.left+", columna "+s.right);
    }

    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico en simbolo: "+s.value+", "+s.left+", "+s.right);
        Interfaz.notificar_err("Error sintactico en simbolo: "+s.value+", linea "+s.left+", columna "+s.right);
    }
:}

action code
{:
    Stack <String> ambito = new Stack <String>();
    int contadorSentencia = 0;

    private Nodo transforma_Switch_If(Nodo switchExpr, Nodo casesNode) {
        // Verifica si el nodo "Cases" con multiples nodos
        if (casesNode.valor.equals("cases")) {
            // obtiene los nodos hijos
            Nodo prevCases = casesNode.hijos.get(0);
            Nodo currentCase = casesNode.hijos.get(1);
            
            // Obtiene las expresiones y las instrucciones
            Nodo caseExpr = currentCase.hijos.get(0);
            Nodo caseInsts = currentCase.hijos.get(1);
            
            // Crea el nodo de comparacion del if
            Nodo comparison = new Nodo("==");
            comparison.hijos.add(switchExpr);
            comparison.hijos.add(caseExpr);
            
            // Crea el nodo If del case actual
            Nodo ifNode = new Nodo("if");
            ifNode.hijos.add(comparison);
            ifNode.hijos.add(caseInsts);
            
            // Agrega el nodo Else, segun los siguientes Case de forma recursiva
            Nodo elseNode = transforma_Switch_If(switchExpr, prevCases);
            Nodo insts = new Nodo("instrucciones");
            insts.hijos.add(elseNode);
            ifNode.hijos.add(insts);
            
            return ifNode;
        } 
        // Valida si es un solo case
        else if (casesNode.valor.equals("case1")) {
            Nodo caseNode = casesNode.hijos.get(0);
            Nodo caseExpr = caseNode.hijos.get(0);
            Nodo caseInsts = caseNode.hijos.get(1);
            
            // Crea el nodo de comparacion del if
            Nodo comparison = new Nodo("==");
            comparison.hijos.add(switchExpr);
            comparison.hijos.add(caseExpr);
            
            // Crea el nodo If del case actual
            Nodo ifNode = new Nodo("if");
            ifNode.hijos.add(comparison);
            ifNode.hijos.add(caseInsts);
            
            return ifNode;
        }
        // Valida si tiene nodo default
        else if (casesNode.valor.equals("default")) {
            Nodo caseNode = casesNode.hijos.get(0);
            Nodo caseExpr = caseNode.hijos.get(0);
            Nodo caseInsts = caseNode.hijos.get(1);
            
            // Crea el nodo de comparacion del if
            Nodo comparison = new Nodo("==");
            comparison.hijos.add(switchExpr);
            comparison.hijos.add(caseExpr);

            // Crea el nodo default 
            Nodo defaultNode = casesNode.hijos.get(1);
            Nodo defaultInsts = defaultNode.hijos.get(0);
            
            // Crea el nodo If del case y le agrega como else el nodo default
            Nodo ifNode = new Nodo("if");
            ifNode.hijos.add(comparison);
            ifNode.hijos.add(caseInsts);
            ifNode.hijos.add(defaultInsts);
                        
            return ifNode;
        }
        
        return new Nodo("error al transformar switch");
    }
:}

terminal PARENTESIS_ABIERTO, PARENTESIS_CERRADO, COMA, 
    DIM, COMO,
    SI, ENTONCES, NO, FINSI,
    MIENTRAS, FINMIENTRAS,
    HACER, REPETIRMIENTRAS,
    PARA, HASTA, PASO, SIGUIENTE,
    SELECCIONAR, CASO, CONTRARIO, FINCASO, FINSELECCIONAR,
    DOS_PUNTOS, PUNTO_COMA, AMPERSAND, TERNARIO,
    IMPRIMIR, OR, AND, NOT, IGUAL_IGUAL, MENOR, MAYOR, IGUAL, MAS, 
    ASTERISCO, MENOS, SLASH, POTENCIA, MODULO;

terminal String ENTERO, DOUBLE, CADENA, TIPO, ID, CARACTER, BOOLEANO;

non terminal inicio;

non terminal Nodo instrucciones, instruccion, asignacion, declaracion, if, if_else_part, while, for, 
    dowhile, switch, cases, case, default, puts, expresion, expresiones, ids;

precedence left OR;
precedence left AND;
precedence left NOT;
precedence left IGUAL_IGUAL;
precedence left MAYOR, MENOR;
precedence left MAS;
precedence left MENOS;
precedence left ASTERISCO;
precedence left SLASH;
precedence left POTENCIA;
precedence left MODULO;
precedence right IGUAL;

start with inicio;

inicio ::= instrucciones:insts
{:
parser.instrucciones = insts;
:};
    

instrucciones ::= instrucciones:insts instruccion:inst PUNTO_COMA
{:
Nodo nodo = insts;
nodo.hijos.add(inst);
RESULT = nodo;
:}
    | instruccion:inst PUNTO_COMA
{:
Nodo nodo = new Nodo("Instruccion");
nodo.hijos.add(inst);
RESULT = nodo;
:}
    ;

instruccion ::= asignacion:inst
{:
RESULT = inst;
:}
    | declaracion:inst
{:
RESULT = inst;
:}
    | if:inst
{:
RESULT = inst;
:}
    | while:inst
{:
RESULT = inst;
:}
    | for:inst
{:
RESULT = inst;
:}
    | dowhile:inst
{:
RESULT = inst;
:}
    | switch:inst
{:
RESULT = inst;
:}
    | puts:inst
{:
RESULT = inst;
:}
    | error PUNTO_COMA {:
Nodo n = new Nodo("Error");
RESULT = n;
:}
    ;

declaracion ::= DIM ids:ids COMO TIPO:tipo IGUAL expresion:expr
{:
Nodo nodoId = new Nodo("variables");
nodoId.hijos.add(ids);
nodoId.hijos.add(new Nodo(tipo));
if(ambito.isEmpty()) {
nodoId.hijos.add(new Nodo(""));
} else {
nodoId.hijos.add(new Nodo(ambito.peek()));
}
Nodo inst = new Nodo("declaracion");
inst.hijos.add(nodoId);
inst.hijos.add(expr);
RESULT = inst;
:}
    ;

ids ::= ids:ids COMA ID:id
{:
Nodo nodo = ids;
nodo.hijos.add(new Nodo(id));
RESULT = nodo;
:}
    | ID:id
{:
Nodo nodo = new Nodo("ids");
nodo.hijos.add(new Nodo(id));
RESULT = nodo;
:} ;

asignacion ::= ID:id IGUAL expresion:expr
{:
Nodo nodoId = new Nodo("variable");
nodoId.hijos.add(new Nodo(id));
Nodo inst = new Nodo("asignacion");
inst.hijos.add(nodoId);
inst.hijos.add(expr);
RESULT = inst;
:}
    | ID:id IGUAL expresion:expr TERNARIO expresion:expr2 DOS_PUNTOS expresion:expr3
{:
Nodo nodoId = new Nodo("variable");
nodoId.hijos.add(new Nodo(id));
Nodo ternario = new Nodo("ternario");
ternario.hijos.add(expr);
ternario.hijos.add(expr2);
ternario.hijos.add(expr3);
Nodo inst = new Nodo("asignacion");
inst.hijos.add(nodoId);
inst.hijos.add(ternario);
RESULT = inst;
:}
    ;

if ::= SI 
    {: 
        contadorSentencia++;
        if(ambito.isEmpty()){
            ambito.add("si"+contadorSentencia);
        } else {
            ambito.add(ambito.peek()+".si"+contadorSentencia);
        }
    :} 
    expresion:expr ENTONCES instrucciones:insts if_else_part:elsepart FINSI
{:
    Nodo nodo = new Nodo("if");
    nodo.hijos.add(expr);
    nodo.hijos.add(insts);
    if (elsepart != null) {
        nodo.hijos.add(elsepart);
    }
    RESULT = nodo;
    ambito.pop();
:}
    ;

if_else_part ::= NO instrucciones:insts2
{:
    RESULT = insts2;
:}
    | /* vac√≠o */
{:
    RESULT = null;
:}
    ;

while ::= MIENTRAS {: 
        contadorSentencia++;
        if(ambito.isEmpty()){
            ambito.add("mientras"+contadorSentencia);
        } else {
            ambito.add(ambito.peek()+".mientras"+contadorSentencia);
        }
    :}  expresion:expr instrucciones:insts FINMIENTRAS
{:
Nodo nodo = new Nodo("while");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;
ambito.pop();
:}
    ;

for ::= PARA {: 
        contadorSentencia++;
        if(ambito.isEmpty()){
            ambito.add("para"+contadorSentencia);
        } else {
            ambito.add(ambito.peek()+".para"+contadorSentencia);
        }
    :} asignacion:inicia HASTA ENTERO:compara PASO ENTERO:salto instrucciones:insts SIGUIENTE ID:id
{:
Nodo nodo = new Nodo("for");
// Nodo de asignacion inicial
Nodo asignFor = new Nodo("Instruccion");
asignFor.hijos.add(inicia);
nodo.hijos.add(asignFor);

// nodo de comparacion
Nodo nodoVariable = new Nodo("variable");
nodoVariable.hijos.add(new Nodo(id));

Nodo nodoValorCompara = new Nodo("valor");
Nodo tipoValorCompara = new Nodo("int");
nodoValorCompara.hijos.add(tipoValorCompara);
tipoValorCompara.hijos.add(new Nodo(compara));

Nodo nodoMenorIgual = new Nodo("<=");
nodoMenorIgual.hijos.add(nodoVariable);
nodoMenorIgual.hijos.add(nodoValorCompara);

nodo.hijos.add(nodoMenorIgual);

// nodo de salto
Nodo nodoValorSalto = new Nodo("valor");
Nodo tipoValorSalto = new Nodo("int");
nodoValorSalto.hijos.add(tipoValorSalto);
tipoValorSalto.hijos.add(new Nodo(salto));

Nodo nodoMas = new Nodo("+");
nodoMas.hijos.add(nodoVariable);
nodoMas.hijos.add(nodoValorSalto);

Nodo inst = new Nodo("asignacion");
inst.hijos.add(nodoVariable);
inst.hijos.add(nodoMas);

asignFor = new Nodo("Instruccion");
asignFor.hijos.add(inst);
nodo.hijos.add(asignFor);

// nodo de instrucciones
nodo.hijos.add(insts);
RESULT = nodo;
ambito.pop();
:}
    ;

dowhile ::= HACER {: 
        contadorSentencia++;
        if(ambito.isEmpty()){
            ambito.add("hacer"+contadorSentencia);
        } else {
            ambito.add(ambito.peek()+".hacer"+contadorSentencia);
        }
    :} instrucciones:insts REPETIRMIENTRAS expresion:expr
{:
Nodo nodo = new Nodo("dowhile");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;
ambito.pop();
:}
    ;

switch ::= SELECCIONAR {: 
        contadorSentencia++;
        if(ambito.isEmpty()){
            ambito.add("seleccionar"+contadorSentencia);
        } else {
            ambito.add(ambito.peek()+".seleccionar"+contadorSentencia);
        }
    :} CASO expresion:expr cases:cases FINSELECCIONAR
{:
Nodo result = transforma_Switch_If(expr, cases);
RESULT = result;
ambito.pop();
:}
    ;

cases ::= case:_case cases:cases 
{: 
Nodo nodo = new Nodo("cases");
nodo.hijos.add(cases);
nodo.hijos.add(_case);
RESULT = nodo;
:}
    | case:_case
{: 
Nodo nodo = new Nodo("case1");
nodo.hijos.add(_case);
RESULT = nodo;
:}
    | case:_case default:_def
{: 
Nodo nodo = new Nodo("default");
nodo.hijos.add(_case);
nodo.hijos.add(_def);
RESULT = nodo;
:}
;

case ::= CASO expresion:expr DOS_PUNTOS instrucciones:insts FINCASO PUNTO_COMA
{:
Nodo nodo = new Nodo("case_data");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;
:}
;

default ::= CASO CONTRARIO DOS_PUNTOS instrucciones:insts FINCASO PUNTO_COMA
{:
Nodo nodo = new Nodo("default");
nodo.hijos.add(insts);
RESULT = nodo;
:}
;



puts ::= IMPRIMIR expresiones:expr
{:
Nodo nodo =  new Nodo("puts");
Nodo nodoConcat = new Nodo("concatenar");
nodoConcat.hijos.add(expr);
nodo.hijos.add(nodoConcat);
RESULT = nodo;
:}
    ;

expresion ::= expresion:expr MAS expresion:expr2
{:
Nodo nodo = new Nodo("+");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr MENOS expresion:expr2
{:
Nodo nodo = new Nodo("-");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr ASTERISCO expresion:expr2
{:
Nodo nodo = new Nodo("*");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr SLASH expresion:expr2
{:
Nodo nodo = new Nodo("/");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr POTENCIA expresion:expr2
{:
Nodo nodo = new Nodo("^");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr MODULO expresion:expr2
{:
Nodo nodo = new Nodo("%");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr MAYOR expresion:expr2
{:
Nodo nodo = new Nodo(">");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr MENOR expresion:expr2
{:
Nodo nodo = new Nodo("<");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr IGUAL_IGUAL expresion:expr2
{:
Nodo nodo = new Nodo("==");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | NOT expresion:expr
{:
Nodo nodo = new Nodo("not");
nodo.hijos.add(expr);
RESULT = nodo;
:}
    | expresion:expr OR expresion:expr2
{:
Nodo nodo = new Nodo("or");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr AND expresion:expr2
{:
Nodo nodo = new Nodo("and");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | PARENTESIS_ABIERTO expresion:expr PARENTESIS_CERRADO
{:
RESULT = expr;
:}
    | ID:id
{:
Nodo nodo = new Nodo("variable");
nodo.hijos.add(new Nodo(id));
RESULT = nodo;
:}
    | ENTERO:entero
{:
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("int");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(entero));
RESULT = nodo;
:}
    | DOUBLE:double_
{:
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("double");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(double_));
RESULT = nodo;
:}
    | CADENA:cadena
{:
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("string");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(cadena));
RESULT = nodo;
:}
    | CARACTER:caracter
{:
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("char");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(caracter));
RESULT = nodo;
:}
    | BOOLEANO:boolean_
{:
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("boolean");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(boolean_));
RESULT = nodo;
:}
    ;

expresiones ::= expresiones:exprs AMPERSAND expresion:expr
{:
Nodo nodo = exprs;
nodo.hijos.add(expr);
RESULT = nodo;
:}
    | expresion:expr
{:
Nodo nodo = new Nodo("Expresion");
nodo.hijos.add(expr);
RESULT = nodo;
:}
    ;