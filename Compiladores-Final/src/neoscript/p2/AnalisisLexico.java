/* The following code was generated by JFlex 1.7.0 */

package neoscript.p2;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import neoscript.p2.Interfaz;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>lexico.jflex</tt>
 */
public class AnalisisLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\24\1\25\1\71\1\24\1\24\22\0\1\24\1\0\1\65"+
    "\1\70\1\0\1\64\1\43\1\66\1\36\1\37\1\61\1\57\1\40"+
    "\1\60\1\2\1\62\12\1\1\41\1\42\1\55\1\54\1\56\1\44"+
    "\1\0\1\15\1\16\1\45\1\22\1\21\1\46\1\11\1\14\1\4"+
    "\2\3\1\20\1\47\1\5\1\17\1\50\1\3\1\10\1\7\1\6"+
    "\1\23\5\3\1\0\1\67\1\0\1\63\1\3\1\0\1\33\1\16"+
    "\1\12\1\53\1\31\1\32\1\11\1\13\1\4\2\3\1\34\1\47"+
    "\1\52\1\51\1\50\1\3\1\27\1\35\1\26\1\30\5\3\12\0"+
    "\1\71\u1fa2\0\1\71\1\71\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\13\3\1\4\3\3\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\6\3\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\2\1"+
    "\1\4\1\0\2\3\1\25\1\26\21\3\1\27\1\25"+
    "\1\30\2\0\1\31\1\0\1\32\1\33\15\3\1\34"+
    "\4\3\1\35\3\3\1\36\1\0\1\37\5\3\1\40"+
    "\1\3\1\41\5\3\1\42\4\3\1\43\1\44\1\4"+
    "\6\3\1\45\1\46\3\3\1\47\26\3\1\50\2\3"+
    "\1\51\4\3\1\52\2\3\1\53\1\54\2\3\1\55"+
    "\6\3\1\56\2\3\1\57\5\3\1\60\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\72\0\72\0\72\0\72\0\72\0\72"+
    "\0\72\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570"+
    "\0\72\0\72\0\72\0\72\0\72\0\u05aa\0\72\0\72"+
    "\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706\0\256\0\u0740"+
    "\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910"+
    "\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0"+
    "\0\u0b1a\0\256\0\u0b54\0\72\0\u0b8e\0\u05e4\0\72\0\u0bc8"+
    "\0\u0692\0\256\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24"+
    "\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\256"+
    "\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\256\0\u0fdc\0\u1016\0\u1050"+
    "\0\256\0\u108a\0\72\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac"+
    "\0\256\0\u11e6\0\256\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308"+
    "\0\256\0\u1342\0\u137c\0\u13b6\0\u13f0\0\256\0\256\0\72"+
    "\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\256\0\256"+
    "\0\u1586\0\u15c0\0\u15fa\0\256\0\u1634\0\u166e\0\u16a8\0\u16e2"+
    "\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2"+
    "\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82"+
    "\0\u1abc\0\u1af6\0\256\0\u1b30\0\u1b6a\0\256\0\u1ba4\0\u1bde"+
    "\0\u1c18\0\u1c52\0\256\0\u1c8c\0\u1cc6\0\256\0\256\0\u1d00"+
    "\0\u1d3a\0\256\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96"+
    "\0\256\0\u1ed0\0\u1f0a\0\256\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2"+
    "\0\u202c\0\256\0\256";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\4\1\7"+
    "\1\10\1\4\1\11\1\12\1\13\1\4\1\14\2\4"+
    "\1\15\1\16\1\4\2\17\1\20\1\10\1\4\1\15"+
    "\1\21\1\22\1\4\1\7\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\16\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\2\1\53\74\0"+
    "\1\3\1\54\70\0\1\4\1\0\21\4\2\0\10\4"+
    "\7\0\7\4\17\0\1\4\1\0\2\4\1\55\16\4"+
    "\2\0\10\4\7\0\2\4\1\56\2\4\1\55\1\4"+
    "\17\0\1\4\1\0\14\4\1\57\4\4\2\0\10\4"+
    "\7\0\4\4\1\57\2\4\17\0\1\4\1\0\1\4"+
    "\1\60\1\4\1\61\12\4\1\62\2\4\2\0\1\61"+
    "\2\4\1\62\4\4\7\0\7\4\17\0\1\4\1\0"+
    "\16\4\1\63\2\4\2\0\3\4\1\63\4\4\7\0"+
    "\7\4\17\0\1\4\1\0\10\4\2\64\1\65\1\4"+
    "\1\66\4\4\2\0\5\4\1\65\2\4\7\0\4\4"+
    "\1\66\2\4\17\0\1\4\1\0\12\4\1\67\6\4"+
    "\2\0\5\4\1\67\2\4\7\0\7\4\17\0\1\4"+
    "\1\0\10\4\2\64\1\67\6\4\2\0\5\4\1\67"+
    "\2\4\7\0\7\4\17\0\1\4\1\0\14\4\1\70"+
    "\4\4\2\0\10\4\7\0\4\4\1\70\2\4\17\0"+
    "\1\4\1\0\2\4\1\71\16\4\2\0\10\4\7\0"+
    "\5\4\1\71\1\4\17\0\1\4\1\0\1\4\1\72"+
    "\12\4\1\73\4\4\2\0\10\4\7\0\4\4\1\73"+
    "\2\4\42\0\2\17\45\0\1\4\1\0\21\4\2\0"+
    "\1\4\1\74\6\4\7\0\7\4\17\0\1\4\1\0"+
    "\1\4\1\75\17\4\2\0\5\4\1\76\2\4\7\0"+
    "\7\4\17\0\1\4\1\0\21\4\2\0\10\4\7\0"+
    "\5\4\1\77\1\4\17\0\1\4\1\0\12\4\1\65"+
    "\1\4\1\66\4\4\2\0\5\4\1\65\2\4\7\0"+
    "\4\4\1\66\2\4\17\0\1\4\1\0\1\4\1\75"+
    "\17\4\2\0\10\4\7\0\7\4\17\0\1\4\1\0"+
    "\1\4\1\100\17\4\2\0\10\4\7\0\7\4\17\0"+
    "\1\4\1\0\12\4\1\101\6\4\2\0\5\4\1\101"+
    "\2\4\7\0\7\4\17\0\1\4\1\0\21\4\2\0"+
    "\1\4\1\102\6\4\7\0\7\4\17\0\1\4\1\0"+
    "\14\4\1\57\4\4\2\0\10\4\7\0\4\4\1\103"+
    "\2\4\72\0\1\104\76\0\1\105\10\0\65\106\1\107"+
    "\4\106\66\110\2\0\2\110\25\53\1\0\44\53\1\0"+
    "\1\111\71\0\1\4\1\0\3\4\1\112\15\4\2\0"+
    "\1\112\7\4\7\0\7\4\17\0\1\4\1\0\21\4"+
    "\2\0\10\4\7\0\3\4\1\113\3\4\17\0\1\4"+
    "\1\0\6\4\1\114\12\4\2\0\10\4\7\0\7\4"+
    "\17\0\1\4\1\0\5\4\1\115\13\4\2\0\1\4"+
    "\1\115\6\4\7\0\7\4\17\0\1\4\1\0\15\4"+
    "\1\116\3\4\2\0\6\4\1\116\1\4\7\0\7\4"+
    "\17\0\1\4\1\0\21\4\2\0\10\4\7\0\3\4"+
    "\1\117\3\4\17\0\1\4\1\0\12\4\1\120\6\4"+
    "\2\0\5\4\1\120\2\4\7\0\7\4\17\0\1\4"+
    "\1\0\4\4\1\121\14\4\2\0\7\4\1\121\7\0"+
    "\7\4\17\0\1\4\1\0\2\4\1\122\16\4\2\0"+
    "\10\4\7\0\2\4\1\123\2\4\1\122\1\4\17\0"+
    "\1\4\1\0\4\4\1\124\2\4\1\125\11\4\2\0"+
    "\7\4\1\124\7\0\1\125\6\4\17\0\1\4\1\0"+
    "\14\4\1\126\4\4\2\0\10\4\7\0\4\4\1\126"+
    "\2\4\17\0\1\4\1\0\3\4\1\127\15\4\2\0"+
    "\1\127\7\4\7\0\7\4\17\0\1\4\1\0\21\4"+
    "\2\0\10\4\7\0\2\4\1\130\4\4\17\0\1\4"+
    "\1\0\20\4\1\131\2\0\2\4\1\131\5\4\7\0"+
    "\7\4\17\0\1\4\1\0\21\4\2\0\2\4\1\132"+
    "\5\4\7\0\7\4\17\0\1\4\1\0\2\4\1\133"+
    "\16\4\2\0\10\4\7\0\5\4\1\133\1\4\17\0"+
    "\1\4\1\0\21\4\2\0\6\4\1\134\1\4\7\0"+
    "\7\4\17\0\1\4\1\0\21\4\2\0\10\4\7\0"+
    "\6\4\1\135\17\0\1\4\1\0\16\4\1\136\2\4"+
    "\2\0\3\4\1\136\4\4\7\0\7\4\17\0\1\4"+
    "\1\0\4\4\1\137\1\140\13\4\2\0\1\4\1\140"+
    "\5\4\1\137\7\0\7\4\17\0\1\4\1\0\21\4"+
    "\2\0\1\141\7\4\7\0\7\4\16\0\61\105\1\142"+
    "\10\105\66\0\1\143\4\0\1\4\1\0\5\4\1\144"+
    "\13\4\2\0\1\4\1\144\6\4\7\0\7\4\17\0"+
    "\1\4\1\0\20\4\1\145\2\0\2\4\1\145\5\4"+
    "\7\0\7\4\17\0\1\4\1\0\1\4\1\146\17\4"+
    "\2\0\10\4\7\0\7\4\17\0\1\4\1\0\16\4"+
    "\1\147\2\4\2\0\3\4\1\147\4\4\7\0\7\4"+
    "\17\0\1\4\1\0\16\4\1\150\2\4\2\0\3\4"+
    "\1\150\4\4\7\0\7\4\17\0\1\4\1\0\5\4"+
    "\1\112\13\4\2\0\1\4\1\112\6\4\7\0\7\4"+
    "\17\0\1\4\1\0\14\4\1\151\4\4\2\0\10\4"+
    "\7\0\4\4\1\151\2\4\17\0\1\4\1\0\3\4"+
    "\1\152\15\4\2\0\1\152\7\4\7\0\7\4\17\0"+
    "\1\4\1\0\14\4\1\153\4\4\2\0\10\4\7\0"+
    "\4\4\1\153\2\4\17\0\1\4\1\0\3\4\1\154"+
    "\15\4\2\0\1\154\7\4\7\0\7\4\17\0\1\4"+
    "\1\0\16\4\1\155\2\4\2\0\3\4\1\155\4\4"+
    "\7\0\7\4\17\0\1\4\1\0\15\4\1\156\3\4"+
    "\2\0\6\4\1\156\1\4\7\0\7\4\17\0\1\4"+
    "\1\0\14\4\1\157\4\4\2\0\10\4\7\0\4\4"+
    "\1\157\2\4\17\0\1\4\1\0\13\4\1\160\5\4"+
    "\2\0\10\4\7\0\7\4\17\0\1\4\1\0\21\4"+
    "\2\0\3\4\1\161\4\4\7\0\7\4\17\0\1\4"+
    "\1\0\4\4\1\162\2\4\1\163\11\4\2\0\7\4"+
    "\1\162\7\0\1\163\1\4\1\164\4\4\17\0\1\4"+
    "\1\0\21\4\2\0\7\4\1\132\7\0\7\4\17\0"+
    "\1\4\1\0\2\4\1\165\16\4\2\0\10\4\7\0"+
    "\5\4\1\165\1\4\17\0\1\4\1\0\14\4\1\166"+
    "\4\4\2\0\10\4\7\0\4\4\1\166\2\4\17\0"+
    "\1\4\1\0\12\4\1\167\6\4\2\0\5\4\1\167"+
    "\2\4\7\0\7\4\16\0\61\105\1\142\1\170\7\105"+
    "\1\0\1\4\1\0\1\4\1\171\17\4\2\0\10\4"+
    "\7\0\7\4\17\0\1\4\1\0\1\4\1\172\17\4"+
    "\2\0\10\4\7\0\7\4\17\0\1\4\1\0\2\4"+
    "\1\173\16\4\2\0\10\4\7\0\5\4\1\173\1\4"+
    "\17\0\1\4\1\0\7\4\1\174\11\4\2\0\10\4"+
    "\7\0\1\174\6\4\17\0\1\4\1\0\3\4\1\175"+
    "\15\4\2\0\1\175\7\4\7\0\7\4\17\0\1\4"+
    "\1\0\5\4\1\176\13\4\2\0\1\4\1\176\6\4"+
    "\7\0\7\4\17\0\1\4\1\0\12\4\1\177\6\4"+
    "\2\0\5\4\1\177\2\4\7\0\7\4\17\0\1\4"+
    "\1\0\5\4\1\200\13\4\2\0\1\4\1\200\6\4"+
    "\7\0\7\4\17\0\1\4\1\0\16\4\1\201\2\4"+
    "\2\0\3\4\1\201\4\4\7\0\7\4\17\0\1\4"+
    "\1\0\2\4\1\202\16\4\2\0\10\4\7\0\5\4"+
    "\1\202\1\4\17\0\1\4\1\0\15\4\1\203\3\4"+
    "\2\0\6\4\1\203\1\4\7\0\7\4\17\0\1\4"+
    "\1\0\1\4\1\204\14\4\1\205\2\4\2\0\3\4"+
    "\1\205\4\4\7\0\7\4\17\0\1\4\1\0\12\4"+
    "\1\206\6\4\2\0\5\4\1\206\2\4\7\0\7\4"+
    "\17\0\1\4\1\0\1\4\1\207\17\4\2\0\10\4"+
    "\7\0\7\4\17\0\1\4\1\0\3\4\1\210\15\4"+
    "\2\0\1\210\7\4\7\0\7\4\17\0\1\4\1\0"+
    "\21\4\2\0\10\4\7\0\2\4\1\211\4\4\17\0"+
    "\1\4\1\0\16\4\1\212\2\4\2\0\3\4\1\212"+
    "\4\4\7\0\7\4\17\0\1\4\1\0\6\4\1\112"+
    "\12\4\2\0\10\4\7\0\7\4\17\0\1\4\1\0"+
    "\7\4\1\213\11\4\2\0\10\4\7\0\1\213\6\4"+
    "\17\0\1\4\1\0\1\4\1\214\17\4\2\0\10\4"+
    "\7\0\7\4\17\0\1\4\1\0\12\4\1\215\6\4"+
    "\2\0\5\4\1\215\2\4\7\0\7\4\17\0\1\4"+
    "\1\0\12\4\1\216\6\4\2\0\5\4\1\216\2\4"+
    "\7\0\7\4\17\0\1\4\1\0\7\4\1\217\11\4"+
    "\2\0\10\4\7\0\1\217\6\4\17\0\1\4\1\0"+
    "\16\4\1\112\2\4\2\0\3\4\1\112\4\4\7\0"+
    "\7\4\17\0\1\4\1\0\15\4\1\220\3\4\2\0"+
    "\6\4\1\220\1\4\7\0\7\4\17\0\1\4\1\0"+
    "\4\4\1\221\14\4\2\0\7\4\1\221\7\0\7\4"+
    "\17\0\1\4\1\0\16\4\1\222\2\4\2\0\3\4"+
    "\1\222\4\4\7\0\7\4\17\0\1\4\1\0\5\4"+
    "\1\223\13\4\2\0\1\4\1\223\6\4\7\0\7\4"+
    "\17\0\1\4\1\0\1\4\1\224\17\4\2\0\10\4"+
    "\7\0\7\4\17\0\1\4\1\0\2\4\1\225\16\4"+
    "\2\0\10\4\7\0\5\4\1\225\1\4\17\0\1\4"+
    "\1\0\1\4\1\226\17\4\2\0\10\4\7\0\7\4"+
    "\17\0\1\4\1\0\5\4\1\227\13\4\2\0\1\4"+
    "\1\227\6\4\7\0\7\4\17\0\1\4\1\0\5\4"+
    "\1\230\13\4\2\0\1\4\1\230\6\4\7\0\7\4"+
    "\17\0\1\4\1\0\2\4\1\112\16\4\2\0\10\4"+
    "\7\0\5\4\1\112\1\4\17\0\1\4\1\0\16\4"+
    "\1\231\2\4\2\0\3\4\1\231\4\4\7\0\7\4"+
    "\17\0\1\4\1\0\16\4\1\232\2\4\2\0\3\4"+
    "\1\232\4\4\7\0\7\4\17\0\1\4\1\0\14\4"+
    "\1\233\4\4\2\0\10\4\7\0\4\4\1\233\2\4"+
    "\17\0\1\4\1\0\2\4\1\234\16\4\2\0\10\4"+
    "\7\0\5\4\1\234\1\4\17\0\1\4\1\0\12\4"+
    "\1\235\6\4\2\0\5\4\1\235\2\4\7\0\7\4"+
    "\17\0\1\4\1\0\5\4\1\236\13\4\2\0\1\4"+
    "\1\236\6\4\7\0\7\4\17\0\1\4\1\0\3\4"+
    "\1\237\15\4\2\0\1\237\7\4\7\0\7\4\17\0"+
    "\1\4\1\0\14\4\1\240\4\4\2\0\10\4\7\0"+
    "\4\4\1\240\2\4\17\0\1\4\1\0\21\4\2\0"+
    "\10\4\7\0\2\4\1\241\4\4\17\0\1\4\1\0"+
    "\1\4\1\242\17\4\2\0\10\4\7\0\7\4\17\0"+
    "\1\4\1\0\4\4\1\243\14\4\2\0\7\4\1\243"+
    "\7\0\7\4\17\0\1\4\1\0\7\4\1\244\11\4"+
    "\2\0\10\4\7\0\1\244\6\4\17\0\1\4\1\0"+
    "\3\4\1\245\15\4\2\0\1\245\7\4\7\0\7\4"+
    "\17\0\1\4\1\0\4\4\1\246\14\4\2\0\7\4"+
    "\1\246\7\0\7\4\17\0\1\4\1\0\16\4\1\247"+
    "\2\4\2\0\3\4\1\247\4\4\7\0\7\4\17\0"+
    "\1\4\1\0\2\4\1\250\16\4\2\0\10\4\7\0"+
    "\5\4\1\250\1\4\17\0\1\4\1\0\1\4\1\251"+
    "\17\4\2\0\10\4\7\0\7\4\17\0\1\4\1\0"+
    "\14\4\1\252\4\4\2\0\10\4\7\0\4\4\1\252"+
    "\2\4\17\0\1\4\1\0\7\4\1\253\11\4\2\0"+
    "\10\4\7\0\1\253\6\4\17\0\1\4\1\0\5\4"+
    "\1\254\13\4\2\0\1\4\1\254\6\4\7\0\7\4"+
    "\17\0\1\4\1\0\12\4\1\255\6\4\2\0\5\4"+
    "\1\255\2\4\7\0\7\4\17\0\1\4\1\0\16\4"+
    "\1\256\2\4\2\0\3\4\1\256\4\4\7\0\7\4"+
    "\17\0\1\4\1\0\1\4\1\257\17\4\2\0\10\4"+
    "\7\0\7\4\17\0\1\4\1\0\12\4\1\260\6\4"+
    "\2\0\5\4\1\260\2\4\7\0\7\4\17\0\1\4"+
    "\1\0\5\4\1\261\13\4\2\0\1\4\1\261\6\4"+
    "\7\0\7\4\17\0\1\4\1\0\2\4\1\262\16\4"+
    "\2\0\10\4\7\0\5\4\1\262\1\4\17\0\1\4"+
    "\1\0\14\4\1\263\4\4\2\0\10\4\7\0\4\4"+
    "\1\263\2\4\17\0\1\4\1\0\4\4\1\264\14\4"+
    "\2\0\7\4\1\264\7\0\7\4\17\0\1\4\1\0"+
    "\3\4\1\265\15\4\2\0\1\265\7\4\7\0\7\4"+
    "\17\0\1\4\1\0\2\4\1\266\16\4\2\0\10\4"+
    "\7\0\5\4\1\266\1\4\17\0\1\4\1\0\5\4"+
    "\1\267\13\4\2\0\1\4\1\267\6\4\7\0\7\4"+
    "\17\0\1\4\1\0\12\4\1\270\6\4\2\0\5\4"+
    "\1\270\2\4\7\0\7\4\17\0\1\4\1\0\12\4"+
    "\1\271\6\4\2\0\5\4\1\271\2\4\7\0\7\4"+
    "\17\0\1\4\1\0\5\4\1\272\13\4\2\0\1\4"+
    "\1\272\6\4\7\0\7\4\17\0\1\4\1\0\4\4"+
    "\1\273\14\4\2\0\7\4\1\273\7\0\7\4\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8294];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\20\1\7\11\7\1\5\11\1\1\2\11"+
    "\3\1\1\0\27\1\1\11\2\0\1\11\1\0\31\1"+
    "\1\0\1\11\24\1\1\11\103\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
//variables, metodos y funciones que necesite (codigo java)

  ComplexSymbolFactory symbolFactory;
  
  public void setSymbolFactory(ComplexSymbolFactory sf){
      symbolFactory = sf;
  }

  private Symbol symbol(String name, int sym) {
      return symbolFactory.newSymbol(name, sym, new Location(yyline+1,yycolumn+1,yychar), new Location(yyline+1,yycolumn+yylength(),yychar+yylength()));
  }

  private Symbol symbol(String name, int sym, Object val) {
      Location left = new Location(yyline+1,yycolumn+1,yychar);
      Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
      return symbolFactory.newSymbol(name, sym, left, right,val);
  }
  private Symbol symbol(String name, int sym, Object val,int buflength) {
      Location left = new Location(yyline+1,yycolumn+yylength()-buflength,yychar+yylength()-buflength);
      Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
      return symbolFactory.newSymbol(name, sym, left, right,val);
  }
  private void error(String message) {
    System.out.println("Error lexico en linea "+(yyline+1)+", columna "+(yycolumn+1)+" caracter: "+message);
    String errLex = "Error lexico en linea "+(yyline+1)+", columna "+(yycolumn+1)+" caracter: "+message;
    Interfaz.notificar_err(errLex);
  }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalisisLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {      return symbolFactory.newSymbol("EOF", Simbolo.EOF, new Location(yyline+1,yycolumn+1,yychar), new Location(yyline+1,yycolumn+1,yychar+1));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error(yytext());
            } 
            // fall through
          case 50: break;
          case 2: 
            { return symbol("ENTERO",Simbolo.ENTERO, yytext());
            } 
            // fall through
          case 51: break;
          case 3: 
            { return symbol("ID",Simbolo.ID, yytext());
            } 
            // fall through
          case 52: break;
          case 4: 
            { 
            } 
            // fall through
          case 53: break;
          case 5: 
            { return symbol("PARENTESIS_ABIERTO",Simbolo.PARENTESIS_ABIERTO);
            } 
            // fall through
          case 54: break;
          case 6: 
            { return symbol("PARENTESIS_CERRADO",Simbolo.PARENTESIS_CERRADO);
            } 
            // fall through
          case 55: break;
          case 7: 
            { return symbol("COMA",Simbolo.COMA);
            } 
            // fall through
          case 56: break;
          case 8: 
            { return symbol("DOS_PUNTOS",Simbolo.DOS_PUNTOS);
            } 
            // fall through
          case 57: break;
          case 9: 
            { return symbol("PUNTO_COMA",Simbolo.PUNTO_COMA,yytext());
            } 
            // fall through
          case 58: break;
          case 10: 
            { return symbol("AMPERSAND",Simbolo.AMPERSAND);
            } 
            // fall through
          case 59: break;
          case 11: 
            { return symbol("TERNARIO",Simbolo.TERNARIO);
            } 
            // fall through
          case 60: break;
          case 12: 
            { return symbol("IGUAL",Simbolo.IGUAL);
            } 
            // fall through
          case 61: break;
          case 13: 
            { return symbol("MENOR",Simbolo.MENOR);
            } 
            // fall through
          case 62: break;
          case 14: 
            { return symbol("MAYOR",Simbolo.MAYOR);
            } 
            // fall through
          case 63: break;
          case 15: 
            { return symbol("MAS",Simbolo.MAS);
            } 
            // fall through
          case 64: break;
          case 16: 
            { return symbol("MENOS",Simbolo.MENOS);
            } 
            // fall through
          case 65: break;
          case 17: 
            { return symbol("ASTERISCO",Simbolo.ASTERISCO);
            } 
            // fall through
          case 66: break;
          case 18: 
            { return symbol("SLASH",Simbolo.SLASH);
            } 
            // fall through
          case 67: break;
          case 19: 
            { return symbol("POTENCIA",Simbolo.POTENCIA);
            } 
            // fall through
          case 68: break;
          case 20: 
            { return symbol("MODULO",Simbolo.MODULO);
            } 
            // fall through
          case 69: break;
          case 21: 
            { return symbol("NO",Simbolo.NO);
            } 
            // fall through
          case 70: break;
          case 22: 
            { return symbol("SI",Simbolo.SI);
            } 
            // fall through
          case 71: break;
          case 23: 
            { return symbol("OR",Simbolo.OR);
            } 
            // fall through
          case 72: break;
          case 24: 
            { return symbol("IGUAL_IGUAL",Simbolo.IGUAL_IGUAL);
            } 
            // fall through
          case 73: break;
          case 25: 
            { String t = yytext();
                return symbol("CADENA",Simbolo.CADENA, t.substring(1, t.length() - 1));
            } 
            // fall through
          case 74: break;
          case 26: 
            { return symbol("DOUBLE",Simbolo.DOUBLE, yytext());
            } 
            // fall through
          case 75: break;
          case 27: 
            { return symbol("TIPO",Simbolo.TIPO,yytext());
            } 
            // fall through
          case 76: break;
          case 28: 
            { return symbol("DIM",Simbolo.DIM);
            } 
            // fall through
          case 77: break;
          case 29: 
            { return symbol("AND",Simbolo.AND);
            } 
            // fall through
          case 78: break;
          case 30: 
            { return symbol("NOT",Simbolo.NOT);
            } 
            // fall through
          case 79: break;
          case 31: 
            { String t = yytext();
                return symbol("CARACTER",Simbolo.CARACTER, t.substring(1, t.length() - 1));
            } 
            // fall through
          case 80: break;
          case 32: 
            { return symbol("CASO",Simbolo.CASO);
            } 
            // fall through
          case 81: break;
          case 33: 
            { return symbol("COMO",Simbolo.COMO);
            } 
            // fall through
          case 82: break;
          case 34: 
            { return symbol("BOOLEANO",Simbolo.BOOLEANO, yytext());
            } 
            // fall through
          case 83: break;
          case 35: 
            { return symbol("PASO",Simbolo.PASO);
            } 
            // fall through
          case 84: break;
          case 36: 
            { return symbol("PARA",Simbolo.PARA);
            } 
            // fall through
          case 85: break;
          case 37: 
            { return symbol("HASTA",Simbolo.HASTA);
            } 
            // fall through
          case 86: break;
          case 38: 
            { return symbol("HACER",Simbolo.HACER);
            } 
            // fall through
          case 87: break;
          case 39: 
            { return symbol("FINSI",Simbolo.FINSI);
            } 
            // fall through
          case 88: break;
          case 40: 
            { return symbol("FINCASO",Simbolo.FINCASO);
            } 
            // fall through
          case 89: break;
          case 41: 
            { return symbol("IMPRIMIR",Simbolo.IMPRIMIR);
            } 
            // fall through
          case 90: break;
          case 42: 
            { return symbol("ENTONCES",Simbolo.ENTONCES);
            } 
            // fall through
          case 91: break;
          case 43: 
            { return symbol("MIENTRAS",Simbolo.MIENTRAS);
            } 
            // fall through
          case 92: break;
          case 44: 
            { return symbol("SIGUIENTE",Simbolo.SIGUIENTE);
            } 
            // fall through
          case 93: break;
          case 45: 
            { return symbol("CONTRARIO",Simbolo.CONTRARIO);
            } 
            // fall through
          case 94: break;
          case 46: 
            { return symbol("SELECCIONAR",Simbolo.SELECCIONAR);
            } 
            // fall through
          case 95: break;
          case 47: 
            { return symbol("FINMIENTRAS",Simbolo.FINMIENTRAS);
            } 
            // fall through
          case 96: break;
          case 48: 
            { return symbol("FINSELECCIONAR",Simbolo.FINSELECCIONAR);
            } 
            // fall through
          case 97: break;
          case 49: 
            { return symbol("REPETIRMIENTRAS",Simbolo.REPETIRMIENTRAS);
            } 
            // fall through
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
