
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package generacion3d;

import java_cup.runtime.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalisisSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolo.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalisisSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalisisSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalisisSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\003\000\002\005" +
    "\004\000\002\005\003\000\002\003\006\000\002\003\007" +
    "\000\002\003\007\000\002\003\013\000\002\011\002\000" +
    "\002\003\012\000\002\003\011\000\002\003\021\000\002" +
    "\006\004\000\002\006\003\000\002\006\004\000\002\007" +
    "\010\000\002\010\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\004\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\016\007\007\012\006\033\004\040\010\041" +
    "\011\042\014\001\002\000\004\014\117\001\002\000\020" +
    "\002\000\007\007\012\006\033\004\040\010\041\011\042" +
    "\014\001\002\000\016\004\020\007\022\010\023\011\021" +
    "\014\025\024\026\001\002\000\004\025\104\001\002\000" +
    "\004\014\100\001\002\000\004\014\072\001\002\000\024" +
    "\002\ufffe\007\ufffe\012\ufffe\017\ufffe\033\ufffe\035\ufffe\040" +
    "\ufffe\041\ufffe\042\ufffe\001\002\000\004\002\071\001\002" +
    "\000\004\014\015\001\002\000\004\007\016\001\002\000" +
    "\004\025\017\001\002\000\016\004\020\007\022\010\023" +
    "\011\021\014\025\024\026\001\002\000\036\005\uffe4\006" +
    "\uffe4\015\uffe4\016\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\037\uffe4\001" +
    "\002\000\036\005\uffe2\006\uffe2\015\uffe2\016\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\037\uffe2\001\002\000\036\005\uffe5\006\uffe5" +
    "\015\uffe5\016\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\037\uffe5\001\002" +
    "\000\036\005\uffe3\006\uffe3\015\uffe3\016\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\037\uffe3\001\002\000\030\005\031\006\035\020" +
    "\034\021\040\022\037\023\032\026\056\027\041\030\033" +
    "\031\036\032\030\001\002\000\016\004\020\007\022\010" +
    "\023\011\021\014\025\024\026\001\002\000\016\004\020" +
    "\007\022\010\023\011\021\014\025\024\026\001\002\000" +
    "\036\005\031\006\035\015\uffe6\016\uffe6\020\034\021\040" +
    "\022\uffe6\023\uffe6\026\uffe6\027\041\030\033\031\036\032" +
    "\030\037\uffe6\001\002\000\016\004\020\007\022\010\023" +
    "\011\021\014\025\024\026\001\002\000\016\004\020\007" +
    "\022\010\023\011\021\014\025\024\026\001\002\000\016" +
    "\004\020\007\022\010\023\011\021\014\025\024\026\001" +
    "\002\000\016\004\020\007\022\010\023\011\021\014\025" +
    "\024\026\001\002\000\016\004\020\007\022\010\023\011" +
    "\021\014\025\024\026\001\002\000\016\004\020\007\022" +
    "\010\023\011\021\014\025\024\026\001\002\000\016\004" +
    "\020\007\022\010\023\011\021\014\025\024\026\001\002" +
    "\000\016\004\020\007\022\010\023\011\021\014\025\024" +
    "\026\001\002\000\016\004\020\007\022\010\023\011\021" +
    "\014\025\024\026\001\002\000\016\004\020\007\022\010" +
    "\023\011\021\014\025\024\026\001\002\000\036\005\ufff0" +
    "\006\ufff0\015\ufff0\016\ufff0\020\ufff0\021\ufff0\022\ufff0\023" +
    "\ufff0\026\ufff0\027\ufff0\030\ufff0\031\036\032\030\037\ufff0" +
    "\001\002\000\036\005\uffeb\006\uffeb\015\uffeb\016\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\026\uffeb\027\041\030\033" +
    "\031\036\032\030\037\uffeb\001\002\000\036\005\031\006" +
    "\035\015\uffe7\016\uffe7\020\034\021\040\022\uffe7\023\uffe7" +
    "\026\uffe7\027\041\030\033\031\036\032\030\037\uffe7\001" +
    "\002\000\036\005\uffef\006\uffef\015\uffef\016\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\026\uffef\027\uffef\030\uffef\031" +
    "\uffef\032\uffef\037\uffef\001\002\000\036\005\uffe8\006\uffe8" +
    "\015\uffe8\016\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\026" +
    "\uffe8\027\041\030\033\031\036\032\030\037\uffe8\001\002" +
    "\000\036\005\uffec\006\uffec\015\uffec\016\uffec\020\uffec\021" +
    "\uffec\022\uffec\023\uffec\026\uffec\027\041\030\033\031\036" +
    "\032\030\037\uffec\001\002\000\036\005\uffee\006\uffee\015" +
    "\uffee\016\uffee\020\uffee\021\uffee\022\uffee\023\uffee\026\uffee" +
    "\027\uffee\030\uffee\031\036\032\030\037\uffee\001\002\000" +
    "\036\005\031\006\035\015\uffea\016\uffea\020\034\021\040" +
    "\022\037\023\uffea\026\uffea\027\041\030\033\031\036\032" +
    "\030\037\uffea\001\002\000\036\005\uffe9\006\uffe9\015\uffe9" +
    "\016\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\026\uffe9\027" +
    "\041\030\033\031\036\032\030\037\uffe9\001\002\000\036" +
    "\005\uffed\006\uffed\015\uffed\016\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed" +
    "\037\uffed\001\002\000\030\005\031\006\035\015\055\020" +
    "\034\021\040\022\037\023\032\027\041\030\033\031\036" +
    "\032\030\001\002\000\036\005\uffe1\006\uffe1\015\uffe1\016" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\037\uffe1\001\002\000\016\004" +
    "\020\007\022\010\023\011\021\014\025\024\026\001\002" +
    "\000\030\005\031\006\035\020\034\021\040\022\037\023" +
    "\032\026\060\027\041\030\033\031\036\032\030\001\002" +
    "\000\004\007\061\001\002\000\004\025\062\001\002\000" +
    "\016\004\020\007\022\010\023\011\021\014\025\024\026" +
    "\001\002\000\030\005\031\006\035\015\064\020\034\021" +
    "\040\022\037\023\032\027\041\030\033\031\036\032\030" +
    "\001\002\000\004\016\065\001\002\000\016\007\007\012" +
    "\006\033\004\040\010\041\011\042\014\001\002\000\020" +
    "\007\007\012\006\017\070\033\004\040\010\041\011\042" +
    "\014\001\002\000\024\002\uffff\007\uffff\012\uffff\017\uffff" +
    "\033\uffff\035\uffff\040\uffff\041\uffff\042\uffff\001\002\000" +
    "\024\002\ufff6\007\ufff6\012\ufff6\017\ufff6\033\ufff6\035\ufff6" +
    "\040\ufff6\041\ufff6\042\ufff6\001\002\000\004\002\001\001" +
    "\002\000\016\004\020\007\022\010\023\011\021\014\025" +
    "\024\026\001\002\000\030\005\031\006\035\015\074\020" +
    "\034\021\040\022\037\023\032\027\041\030\033\031\036" +
    "\032\030\001\002\000\004\016\075\001\002\000\016\007" +
    "\007\012\006\033\004\040\010\041\011\042\014\001\002" +
    "\000\020\007\007\012\006\017\077\033\004\040\010\041" +
    "\011\042\014\001\002\000\024\002\ufff7\007\ufff7\012\ufff7" +
    "\017\ufff7\033\ufff7\035\ufff7\040\ufff7\041\ufff7\042\ufff7\001" +
    "\002\000\004\007\101\001\002\000\004\015\102\001\002" +
    "\000\004\026\103\001\002\000\024\002\ufffc\007\ufffc\012" +
    "\ufffc\017\ufffc\033\ufffc\035\ufffc\040\ufffc\041\ufffc\042\ufffc" +
    "\001\002\000\016\004\020\007\022\010\023\011\021\014" +
    "\025\024\026\001\002\000\030\005\031\006\035\020\034" +
    "\021\040\022\037\023\032\026\106\027\041\030\033\031" +
    "\036\032\030\001\002\000\024\002\ufffd\007\ufffd\012\ufffd" +
    "\017\ufffd\033\ufffd\035\ufffd\040\ufffd\041\ufffd\042\ufffd\001" +
    "\002\000\030\005\031\006\035\016\110\020\034\021\040" +
    "\022\037\023\032\027\041\030\033\031\036\032\030\001" +
    "\002\000\016\007\007\012\006\033\004\040\010\041\011" +
    "\042\014\001\002\000\020\007\007\012\006\017\112\033" +
    "\004\040\010\041\011\042\014\001\002\000\026\002\ufffb" +
    "\007\ufffb\012\ufffb\013\113\017\ufffb\033\ufffb\035\ufffb\040" +
    "\ufffb\041\ufffb\042\ufffb\001\002\000\004\016\114\001\002" +
    "\000\016\007\007\012\006\033\004\040\010\041\011\042" +
    "\014\001\002\000\020\007\007\012\006\017\116\033\004" +
    "\040\010\041\011\042\014\001\002\000\024\002\ufffa\007" +
    "\ufffa\012\ufffa\017\ufffa\033\ufffa\035\ufffa\040\ufffa\041\ufffa" +
    "\042\ufffa\001\002\000\004\007\120\001\002\000\004\015" +
    "\ufff9\001\002\000\004\015\122\001\002\000\004\016\123" +
    "\001\002\000\004\034\124\001\002\000\016\004\020\007" +
    "\022\010\023\011\021\014\025\024\026\001\002\000\004" +
    "\017\134\001\002\000\010\017\ufff4\034\124\036\131\001" +
    "\002\000\004\017\ufff3\001\002\000\004\017\ufff5\001\002" +
    "\000\004\037\132\001\002\000\016\007\007\012\006\033" +
    "\004\040\010\041\011\042\014\001\002\000\020\007\007" +
    "\012\006\017\ufff1\033\004\040\010\041\011\042\014\001" +
    "\002\000\024\002\ufff8\007\ufff8\012\ufff8\017\ufff8\033\ufff8" +
    "\035\ufff8\040\ufff8\041\ufff8\042\ufff8\001\002\000\030\005" +
    "\031\006\035\020\034\021\040\022\037\023\032\027\041" +
    "\030\033\031\036\032\030\037\136\001\002\000\016\007" +
    "\007\012\006\033\004\040\010\041\011\042\014\001\002" +
    "\000\020\007\007\012\006\033\004\035\140\040\010\041" +
    "\011\042\014\001\002\000\004\026\141\001\002\000\010" +
    "\017\ufff2\034\ufff2\036\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\010\002\012\003\011\005\004\001\001\000" +
    "\002\001\001\000\004\003\066\001\001\000\004\004\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\053\001" +
    "\001\000\004\004\026\001\001\000\002\001\001\000\004" +
    "\004\052\001\001\000\004\004\051\001\001\000\004\004" +
    "\050\001\001\000\004\004\047\001\001\000\004\004\046" +
    "\001\001\000\004\004\045\001\001\000\004\004\044\001" +
    "\001\000\004\004\043\001\001\000\004\004\042\001\001" +
    "\000\004\004\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\011\005" +
    "\065\001\001\000\004\003\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\011" +
    "\005\075\001\001\000\004\003\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\011" +
    "\005\110\001\001\000\004\003\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\011\005\114\001\001" +
    "\000\004\003\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\124\007\125\001\001\000\004\004" +
    "\134\001\001\000\002\001\001\000\010\006\127\007\125" +
    "\010\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\011\005\132\001\001\000\004" +
    "\003\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\011\005\136\001\001\000\004\003\066\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalisisSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalisisSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalisisSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




     
public LinkedList<ErrorCompilador> lista=new LinkedList<ErrorCompilador>();
            /**Metodo al que se llama automaticamente ante algun error sintactico.*/
public void syntax_error(Symbol s){
       lista.add(new ErrorCompilador(s.right+1,s.left,"Error sintactico Identificador " +s.value + " no reconocido." ));
    }
public void semantico(int right,int left, String descripcion){
lista.add(new ErrorCompilador(right+1,left,"Error Semantico "+descripcion));
}
             /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        lista.add(new ErrorCompilador(s.right+1,s.left,"Error sintactico Identificador " +s.value + " no reconocido." ));
    }
public String resultado="";


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalisisSintactico$actions {

 
int gtemp=-1;
int geti=-1;
String heredado="";
public String temporal(){
gtemp++;
return "T"+gtemp;
}

public String etiqueta(){
geti++;
return "L"+geti;
}


  private final AnalisisSintactico parser;

  /** Constructor */
  CUP$AnalisisSintactico$actions(AnalisisSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalisisSintactico$do_action_part00000000(
    int                        CUP$AnalisisSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisisSintactico$parser,
    java.util.Stack            CUP$AnalisisSintactico$stack,
    int                        CUP$AnalisisSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalisisSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalisisSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		tresd start_val = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalisisSintactico$parser.done_parsing();
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIA ::= S 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		tresd a = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
parser.resultado="#include <iostream>\n" + "using namespace std;\n\n";
parser.resultado+="int main(){\n";
parser.resultado+=a.cod;
parser.resultado+="return 0;\n}";

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= S L 
            {
              tresd RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		tresd s = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		tresd l = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    RESULT = s;
    RESULT.cod += l.cod;


              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("S",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= L 
            {
              tresd RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		tresd l = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    RESULT = l;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("S",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L ::= iden igual E pcoma 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		tresd b = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
	RESULT=b;
	RESULT.cod+=a+"= "+b.valor+";\n";

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L ::= imprimir aparen iden cparen pcoma 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
	RESULT=new tresd();
	RESULT.cod+="cout<<"+a+"<<endl;\n";

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // L ::= si E allave S cllave 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		tresd a = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		tresd b = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
	RESULT=a;
	RESULT.cod+=a.lv+":\n"+b.cod+a.lf+":\n";

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // L ::= si E allave S cllave sino allave S cllave 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).right;
		tresd a = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		tresd b = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		tresd c = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
	RESULT=a;
        String lff = etiqueta();
	RESULT.cod+=a.lv+":\n"+b.cod+"goto "+lff+";\n"+a.lf+":\n"+c.cod+lff+":\n";

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              tresd RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
 heredado=v; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // L ::= seleccionar aparen iden NT$0 cparen allave CASES cllave 
            {
              tresd RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (tresd) ((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		tresd cases = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
	RESULT=new tresd();
	RESULT.cod=cases.cod;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // L ::= mientras aparen E cparen allave S cllave 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		tresd a = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		tresd b = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
	RESULT=new tresd();
        String tmp = etiqueta();
	RESULT.cod+=tmp+":\n"+a.cod+a.lv+":\n"+b.cod+"goto "+tmp+";\n"+a.lf+":\n";

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // L ::= para aparen iden igual E pcoma E pcoma iden igual E cparen allave S cllave 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-12)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).right;
		tresd b = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).right;
		tresd c = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		tresd e = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		tresd f = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
	RESULT=new tresd();
        RESULT.cod+=a+"= "+b.valor+";\n";
        String tmp = etiqueta();
        RESULT.cod+=tmp+":\n";
	RESULT.cod+=c.cod+c.lv+":\n"+f.cod;
        RESULT.cod+=e.cod+d+"= "+e.valor+";\n";
        RESULT.cod+="goto "+tmp+";\n"+c.lf+":\n";

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-14)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CASES ::= CASE CASES 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		tresd a = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		tresd b = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
	RESULT=new tresd();
	RESULT.cod=a.cod + b.cod + a.lf + ":\n";

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("CASES",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CASES ::= CASE 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		tresd a = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
	RESULT=a;
        RESULT.cod+=a.lf + ":\n";

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("CASES",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CASES ::= CASE DEFAULT 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		tresd a = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		tresd b = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
	RESULT=new tresd();
	RESULT.cod=a.cod + b.cod + a.lf + ":\n";

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("CASES",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CASE ::= caso E dpuntos S salir pcoma 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		tresd a = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		tresd b = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
	RESULT=new tresd();
	RESULT.lv=etiqueta();
        String tmp_lf = etiqueta();
        RESULT.lf=etiqueta();
	RESULT.cod=a.cod + "if(" + heredado + " == " + a.valor + ") goto " + RESULT.lv + ";\n";
	RESULT.cod+="goto " + tmp_lf + ";\n";
	RESULT.cod+=RESULT.lv + ":\n" + b.cod + "goto " + RESULT.lf + ";\n" + tmp_lf + ":\n";

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("CASE",5, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DEFAULT ::= defecto dpuntos S 
            {
              tresd RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		tresd b = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
	RESULT=new tresd();
	RESULT.cod= b.cod;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= E mas E 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		tresd a = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		tresd b = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
	RESULT=a;
	String tm=temporal();
	RESULT.cod+=b.cod+tm+"= "+a.valor+" + "+b.valor+";\n"; 
        RESULT.valor=tm;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E ::= E por E 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		tresd a = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		tresd b = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
	RESULT=a;
	String tm=temporal();
	RESULT.cod+=b.cod+tm+"= "+a.valor+" * "+b.valor+";\n"; 
        RESULT.valor=tm;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= E menos E 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		tresd a = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		tresd b = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
	RESULT=a;
	String tm=temporal();
	RESULT.cod+=b.cod+tm+"= "+a.valor+" - "+b.valor+";\n"; 
        RESULT.valor=tm;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= E div E 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		tresd a = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		tresd b = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
	RESULT=a;
	String tm=temporal();
	RESULT.cod+=b.cod+tm+"= "+a.valor+" / "+b.valor+";\n"; 
        RESULT.valor=tm;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E ::= E menor E 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		tresd a = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		tresd b = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
	RESULT=a;
	RESULT.lv=etiqueta();
	RESULT.lf=etiqueta();
	RESULT.cod+=b.cod+"if("+a.valor+" < "+b.valor+") goto "+RESULT.lv+";\n";
	RESULT.cod+="goto "+RESULT.lf+";\n";

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E ::= E mayor E 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		tresd a = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		tresd b = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
	RESULT=a;
	RESULT.lv=etiqueta();
	RESULT.lf=etiqueta();
	RESULT.cod+=b.cod+"if("+a.valor+" > "+b.valor+") goto "+RESULT.lv+";\n";
	RESULT.cod+="goto "+RESULT.lf+";\n";

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E ::= E opo E 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		tresd a = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		tresd b = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
	RESULT=new tresd();
	RESULT.lv=a.lv+":\n"+b.lv;
	RESULT.lf=b.lf;
	RESULT.cod=a.cod+a.lf+":\n"+b.cod;
	

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= E igualIgual E 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		tresd a = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		tresd b = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
	RESULT=a;
	RESULT.lv=etiqueta();
	RESULT.lf=etiqueta();
	RESULT.cod+=b.cod+"if("+a.valor+" == "+b.valor+") goto "+RESULT.lv+";\n";
	RESULT.cod+="goto "+RESULT.lf+";\n";
	

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= E diferente E 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		tresd a = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		tresd b = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
	RESULT=a;
	RESULT.lv=etiqueta();
	RESULT.lf=etiqueta();
	RESULT.cod+=b.cod+"if("+a.valor+" != "+b.valor+") goto "+RESULT.lv+";\n";
	RESULT.cod+="goto "+RESULT.lf+";\n";
	

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= E opy E 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		tresd a = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		tresd b = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
	RESULT=new tresd();
	RESULT.lv=b.lv; 
	RESULT.lf=a.lf+":\n"+b.lf;
	RESULT.cod=a.cod+a.lv+":\n"+b.cod;
	

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= opn E 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		tresd a = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
	RESULT=a;
	String tmp=RESULT.lv;
	RESULT.lv=RESULT.lf;
	RESULT.lf=tmp;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= iden 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
 	RESULT=new tresd();	
	RESULT.valor=a;
	

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= verdadero 
            {
              tresd RESULT =null;
		
 	RESULT=new tresd();
        RESULT.valor="1";

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= falso 
            {
              tresd RESULT =null;
		
 	RESULT=new tresd();
        RESULT.valor="0";


              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= numero 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
 	RESULT=new tresd();	
	RESULT.valor=a;
        

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= aparen E cparen 
            {
              tresd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		tresd a = (tresd)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
	RESULT=a;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalisisSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalisisSintactico$do_action(
    int                        CUP$AnalisisSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisisSintactico$parser,
    java.util.Stack            CUP$AnalisisSintactico$stack,
    int                        CUP$AnalisisSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalisisSintactico$do_action_part00000000(
                               CUP$AnalisisSintactico$act_num,
                               CUP$AnalisisSintactico$parser,
                               CUP$AnalisisSintactico$stack,
                               CUP$AnalisisSintactico$top);
    }
}

}
