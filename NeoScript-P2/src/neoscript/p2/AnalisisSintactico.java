
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package neoscript.p2;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalisisSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolo.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalisisSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalisisSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalisisSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\005\005\000\002\006\010\000\002\006\012\000\002\007" +
    "\007\000\002\010\014\000\002\011\007\000\002\012\011" +
    "\000\002\013\004\000\002\013\003\000\002\013\004\000" +
    "\002\014\007\000\002\014\006\000\002\015\006\000\002" +
    "\015\005\000\002\016\004\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\004\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\006\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\020\005\000\002\020" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\022\003\020\007\017\013\024\015\025\017" +
    "\010\033\007\040\021\055\011\001\002\000\024\002\000" +
    "\003\020\007\017\013\024\015\025\017\010\033\007\040" +
    "\021\055\011\001\002\000\046\002\ufff9\003\ufff9\007\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017" +
    "\ufff9\022\ufff9\025\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9" +
    "\040\ufff9\055\ufff9\001\002\000\046\002\ufffe\003\ufffe\007" +
    "\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe" +
    "\017\ufffe\022\ufffe\025\ufffe\032\ufffe\033\ufffe\034\ufffe\035" +
    "\ufffe\040\ufffe\055\ufffe\001\002\000\004\004\122\001\002" +
    "\000\004\055\011\001\002\000\004\047\107\001\002\000" +
    "\046\002\ufffd\003\ufffd\007\ufffd\011\ufffd\012\ufffd\013\ufffd" +
    "\014\ufffd\015\ufffd\016\ufffd\017\ufffd\022\ufffd\025\ufffd\032" +
    "\ufffd\033\ufffd\034\ufffd\035\ufffd\040\ufffd\055\ufffd\001\002" +
    "\000\046\002\ufff7\003\ufff7\007\ufff7\011\ufff7\012\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\022\ufff7\025\ufff7" +
    "\032\ufff7\033\ufff7\034\ufff7\035\ufff7\040\ufff7\055\ufff7\001" +
    "\002\000\004\002\106\001\002\000\046\002\ufffc\003\ufffc" +
    "\007\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016" +
    "\ufffc\017\ufffc\022\ufffc\025\ufffc\032\ufffc\033\ufffc\034\ufffc" +
    "\035\ufffc\040\ufffc\055\ufffc\001\002\000\046\002\ufffb\003" +
    "\ufffb\007\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\017\ufffb\022\ufffb\025\ufffb\032\ufffb\033\ufffb\034" +
    "\ufffb\035\ufffb\040\ufffb\055\ufffb\001\002\000\016\004\034" +
    "\037\033\043\032\053\035\054\036\055\031\001\002\000" +
    "\046\002\ufff6\003\ufff6\007\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\014\ufff6\015\ufff6\016\ufff6\017\ufff6\022\ufff6\025\ufff6\032" +
    "\ufff6\033\ufff6\034\ufff6\035\ufff6\040\ufff6\055\ufff6\001\002" +
    "\000\016\004\034\037\033\043\032\053\035\054\036\055" +
    "\031\001\002\000\046\002\ufffa\003\ufffa\007\ufffa\011\ufffa" +
    "\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\022" +
    "\ufffa\025\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\040\ufffa" +
    "\055\ufffa\001\002\000\046\002\ufff8\003\ufff8\007\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8" +
    "\022\ufff8\025\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\040" +
    "\ufff8\055\ufff8\001\002\000\016\004\034\037\033\043\032" +
    "\053\035\054\036\055\031\001\002\000\022\003\020\007" +
    "\017\013\024\015\025\017\010\033\007\040\021\055\011" +
    "\001\002\000\024\003\020\007\017\013\024\015\025\016" +
    "\030\017\010\033\007\040\021\055\011\001\002\000\046" +
    "\002\uffff\003\uffff\007\uffff\011\uffff\012\uffff\013\uffff\014" +
    "\uffff\015\uffff\016\uffff\017\uffff\022\uffff\025\uffff\032\uffff" +
    "\033\uffff\034\uffff\035\uffff\040\uffff\055\uffff\001\002\000" +
    "\016\004\034\037\033\043\032\053\035\054\036\055\031" +
    "\001\002\000\100\002\uffdc\003\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\022\uffdc\025\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\044\uffdc\045\uffdc\046\uffdc\050\uffdc\051\uffdc\052\uffdc\055" +
    "\uffdc\001\002\000\016\004\034\037\033\043\032\053\035" +
    "\054\036\055\031\001\002\000\004\004\061\001\002\000" +
    "\016\004\034\037\033\043\032\053\035\054\036\055\031" +
    "\001\002\000\100\002\uffdb\003\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\022\uffdb\025\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\050\uffdb\051\uffdb\052\uffdb\055" +
    "\uffdb\001\002\000\100\002\uffda\003\uffda\005\uffda\006\uffda" +
    "\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\022\uffda\025\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\036\uffda\040\uffda\041\uffda\042" +
    "\uffda\044\uffda\045\uffda\046\uffda\050\uffda\051\uffda\052\uffda" +
    "\055\uffda\001\002\000\022\041\047\042\043\044\042\045" +
    "\045\046\046\050\041\051\040\052\044\001\002\000\016" +
    "\004\034\037\033\043\032\053\035\054\036\055\031\001" +
    "\002\000\016\004\034\037\033\043\032\053\035\054\036" +
    "\055\031\001\002\000\016\004\034\037\033\043\032\053" +
    "\035\054\036\055\031\001\002\000\016\004\034\037\033" +
    "\043\032\053\035\054\036\055\031\001\002\000\046\002" +
    "\ufff0\003\ufff0\007\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\017\ufff0\022\ufff0\025\ufff0\032\ufff0\033" +
    "\ufff0\034\ufff0\035\ufff0\040\ufff0\055\ufff0\001\002\000\016" +
    "\004\034\037\033\043\032\053\035\054\036\055\031\001" +
    "\002\000\016\004\034\037\033\043\032\053\035\054\036" +
    "\055\031\001\002\000\016\004\034\037\033\043\032\053" +
    "\035\054\036\055\031\001\002\000\100\002\uffe0\003\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\022\uffe0" +
    "\025\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\040" +
    "\uffe0\041\uffe0\042\043\044\042\045\045\046\046\050\041" +
    "\051\040\052\uffe0\055\uffe0\001\002\000\100\002\uffe4\003" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\022" +
    "\uffe4\025\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\044\uffe4\045\uffe4\046\uffe4\050" +
    "\041\051\040\052\uffe4\055\uffe4\001\002\000\100\002\uffe3" +
    "\003\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\022\uffe3\025\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\040\uffe3\041\uffe3\042\uffe3\044\uffe3\045\uffe3\046\uffe3" +
    "\050\041\051\040\052\uffe3\055\uffe3\001\002\000\100\002" +
    "\uffdf\003\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\022\uffdf\025\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\040\uffdf\041\uffdf\042\uffdf\044\042\045\045\046" +
    "\046\050\041\051\040\052\uffdf\055\uffdf\001\002\000\100" +
    "\002\uffe2\003\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\022\uffe2\025\uffe2\032\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\040\uffe2\041\uffe2\042\uffe2\044\uffe2\045\045" +
    "\046\046\050\041\051\040\052\uffe2\055\uffe2\001\002\000" +
    "\100\002\uffe6\003\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017" +
    "\uffe6\020\uffe6\022\uffe6\025\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\040\uffe6\041\uffe6\042\uffe6\044\uffe6\045" +
    "\uffe6\046\uffe6\050\uffe6\051\040\052\uffe6\055\uffe6\001\002" +
    "\000\100\002\uffe5\003\uffe5\005\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\022\uffe5\025\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5\042\uffe5\044\uffe5" +
    "\045\uffe5\046\uffe5\050\uffe5\051\uffe5\052\uffe5\055\uffe5\001" +
    "\002\000\022\005\060\041\047\042\043\044\042\045\045" +
    "\046\046\050\041\051\040\001\002\000\100\002\uffde\003" +
    "\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\022" +
    "\uffde\025\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\040\uffde\041\uffde\042\uffde\044\uffde\045\uffde\046\uffde\050" +
    "\uffde\051\uffde\052\uffde\055\uffde\001\002\000\016\004\034" +
    "\037\033\043\032\053\035\054\036\055\031\001\002\000" +
    "\006\005\065\006\064\001\002\000\024\005\uffd8\006\uffd8" +
    "\041\047\042\043\044\042\045\045\046\046\050\041\051" +
    "\040\001\002\000\016\004\034\037\033\043\032\053\035" +
    "\054\036\055\031\001\002\000\100\002\uffdd\003\uffdd\005" +
    "\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\022\uffdd\025" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\044\uffdd\045\uffdd\046\uffdd\050\uffdd\051" +
    "\uffdd\052\uffdd\055\uffdd\001\002\000\024\005\uffd9\006\uffd9" +
    "\041\047\042\043\044\042\045\045\046\046\050\041\051" +
    "\040\001\002\000\100\002\uffe1\003\uffe1\005\uffe1\006\uffe1" +
    "\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\022\uffe1\025\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\036\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\044\042\045\045\046\046\050\041\051\040\052\uffe1" +
    "\055\uffe1\001\002\000\040\003\020\007\017\013\024\015" +
    "\025\017\010\033\007\040\021\041\047\042\043\044\042" +
    "\045\045\046\046\050\041\051\040\055\011\001\002\000" +
    "\024\003\020\007\017\013\024\014\072\015\025\017\010" +
    "\033\007\040\021\055\011\001\002\000\004\052\073\001" +
    "\002\000\046\002\ufff2\003\ufff2\007\ufff2\011\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\022\ufff2\025" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\040\ufff2\055\ufff2" +
    "\001\002\000\064\002\uffe7\003\uffe7\007\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\022\uffe7" +
    "\025\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\040\uffe7\041" +
    "\047\042\043\044\042\045\045\046\046\050\041\051\040" +
    "\055\uffe7\001\002\000\022\010\076\041\047\042\043\044" +
    "\042\045\045\046\046\050\041\051\040\001\002\000\022" +
    "\003\020\007\017\013\024\015\025\017\010\033\007\040" +
    "\021\055\011\001\002\000\026\003\020\007\017\011\100" +
    "\012\101\013\024\015\025\017\010\033\007\040\021\055" +
    "\011\001\002\000\022\003\020\007\017\013\024\015\025" +
    "\017\010\033\007\040\021\055\011\001\002\000\004\052" +
    "\102\001\002\000\046\002\ufff4\003\ufff4\007\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\022" +
    "\ufff4\025\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\040\ufff4" +
    "\055\ufff4\001\002\000\024\003\020\007\017\012\104\013" +
    "\024\015\025\017\010\033\007\040\021\055\011\001\002" +
    "\000\004\052\105\001\002\000\046\002\ufff3\003\ufff3\007" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3" +
    "\017\ufff3\022\ufff3\025\ufff3\032\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\040\ufff3\055\ufff3\001\002\000\004\002\001\001\002" +
    "\000\016\004\034\037\033\043\032\053\035\054\036\055" +
    "\031\001\002\000\066\002\ufff5\003\ufff5\007\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020" +
    "\ufff5\022\ufff5\025\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5" +
    "\040\ufff5\041\047\042\043\044\042\045\045\046\046\050" +
    "\041\051\040\055\ufff5\001\002\000\004\020\112\001\002" +
    "\000\004\053\113\001\002\000\004\021\114\001\002\000" +
    "\004\053\115\001\002\000\022\003\020\007\017\013\024" +
    "\015\025\017\010\033\007\040\021\055\011\001\002\000" +
    "\024\003\020\007\017\013\024\015\025\017\010\022\117" +
    "\033\007\040\021\055\011\001\002\000\004\055\120\001" +
    "\002\000\004\052\121\001\002\000\046\002\ufff1\003\ufff1" +
    "\007\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\022\ufff1\025\ufff1\032\ufff1\033\ufff1\034\ufff1" +
    "\035\ufff1\040\ufff1\055\ufff1\001\002\000\016\004\034\037" +
    "\033\043\032\053\035\054\036\055\031\001\002\000\022" +
    "\005\124\041\047\042\043\044\042\045\045\046\046\050" +
    "\041\051\040\001\002\000\004\031\125\001\002\000\004" +
    "\034\130\001\002\000\010\032\uffed\034\130\035\136\001" +
    "\002\000\004\032\135\001\002\000\016\004\034\037\033" +
    "\043\032\053\035\054\036\055\031\001\002\000\022\036" +
    "\132\041\047\042\043\044\042\045\045\046\046\050\041" +
    "\051\040\001\002\000\022\003\020\007\017\013\024\015" +
    "\025\017\010\033\007\040\021\055\011\001\002\000\032" +
    "\003\020\007\017\013\024\015\025\017\010\025\134\032" +
    "\uffea\033\007\034\uffea\035\uffea\040\021\055\011\001\002" +
    "\000\010\032\uffeb\034\uffeb\035\uffeb\001\002\000\046\002" +
    "\uffef\003\uffef\007\uffef\011\uffef\012\uffef\013\uffef\014\uffef" +
    "\015\uffef\016\uffef\017\uffef\022\uffef\025\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\040\uffef\055\uffef\001\002\000\004" +
    "\036\141\001\002\000\004\032\uffec\001\002\000\004\032" +
    "\uffee\001\002\000\022\003\020\007\017\013\024\015\025" +
    "\017\010\033\007\040\021\055\011\001\002\000\026\003" +
    "\020\007\017\013\024\015\025\017\010\025\143\032\uffe8" +
    "\033\007\040\021\055\011\001\002\000\004\032\uffe9\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\026\002\013\003\003\004\005\005\011\006" +
    "\014\007\015\010\021\011\004\012\022\016\012\001\001" +
    "\000\022\004\026\005\011\006\014\007\015\010\021\011" +
    "\004\012\022\016\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\074\001\001\000\002\001\001\000\004\017\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\067\001" +
    "\001\000\024\003\025\004\005\005\011\006\014\007\015" +
    "\010\021\011\004\012\022\016\012\001\001\000\022\004" +
    "\026\005\011\006\014\007\015\010\021\011\004\012\022" +
    "\016\012\001\001\000\002\001\001\000\004\017\036\001" +
    "\001\000\002\001\001\000\004\017\066\001\001\000\002" +
    "\001\001\000\004\017\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\055\001\001" +
    "\000\004\017\054\001\001\000\004\017\053\001\001\000" +
    "\004\017\052\001\001\000\002\001\001\000\004\017\051" +
    "\001\001\000\004\017\050\001\001\000\004\017\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\062\020\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\070\004\005\005" +
    "\011\006\014\007\015\010\021\011\004\012\022\016\012" +
    "\001\001\000\022\004\026\005\011\006\014\007\015\010" +
    "\021\011\004\012\022\016\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\076\004\005\005\011\006\014\007\015\010\021" +
    "\011\004\012\022\016\012\001\001\000\022\004\026\005" +
    "\011\006\014\007\015\010\021\011\004\012\022\016\012" +
    "\001\001\000\024\003\102\004\005\005\011\006\014\007" +
    "\015\010\021\011\004\012\022\016\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\026\005\011\006" +
    "\014\007\015\010\021\011\004\012\022\016\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\115\004\005\005\011\006\014\007\015\010\021" +
    "\011\004\012\022\016\012\001\001\000\022\004\026\005" +
    "\011\006\014\007\015\010\021\011\004\012\022\016\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\126\014\125\001\001\000\010\013" +
    "\137\014\125\015\136\001\001\000\002\001\001\000\004" +
    "\017\130\001\001\000\002\001\001\000\024\003\132\004" +
    "\005\005\011\006\014\007\015\010\021\011\004\012\022" +
    "\016\012\001\001\000\022\004\026\005\011\006\014\007" +
    "\015\010\021\011\004\012\022\016\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\141\004\005\005\011" +
    "\006\014\007\015\010\021\011\004\012\022\016\012\001" +
    "\001\000\022\004\026\005\011\006\014\007\015\010\021" +
    "\011\004\012\022\016\012\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalisisSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalisisSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalisisSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo instrucciones;
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error en simbolo: "+s.value+", "+s.left+", "+s.right);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error en simbolo: "+s.value+", "+s.left+", "+s.right);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalisisSintactico$actions {


    private Nodo transforma_Switch_If(Nodo switchExpr, Nodo casesNode) {
        // Verifica si el nodo "Cases" con multiples nodos
        if (casesNode.valor.equals("cases")) {
            // obtiene los nodos hijos
            Nodo prevCases = casesNode.hijos.get(0);
            Nodo currentCase = casesNode.hijos.get(1);
            
            // Obtiene las expresiones y las instrucciones
            Nodo caseExpr = currentCase.hijos.get(0);
            Nodo caseInsts = currentCase.hijos.get(1);
            
            // Crea el nodo de comparacion del if
            Nodo comparison = new Nodo("==");
            comparison.hijos.add(switchExpr);
            comparison.hijos.add(caseExpr);
            
            // Crea el nodo If del case actual
            Nodo ifNode = new Nodo("if");
            ifNode.hijos.add(comparison);
            ifNode.hijos.add(caseInsts);
            
            // Agrega el nodo Else, segun los siguientes Case de forma recursiva
            Nodo elseNode = transforma_Switch_If(switchExpr, prevCases);
            Nodo insts = new Nodo("instrucciones");
            insts.hijos.add(elseNode);
            ifNode.hijos.add(insts);
            
            return ifNode;
        } 
        // Valida si es un solo case
        else if (casesNode.valor.equals("case1")) {
            Nodo caseNode = casesNode.hijos.get(0);
            Nodo caseExpr = caseNode.hijos.get(0);
            Nodo caseInsts = caseNode.hijos.get(1);
            
            // Crea el nodo de comparacion del if
            Nodo comparison = new Nodo("==");
            comparison.hijos.add(switchExpr);
            comparison.hijos.add(caseExpr);
            
            // Crea el nodo If del case actual
            Nodo ifNode = new Nodo("if");
            ifNode.hijos.add(comparison);
            ifNode.hijos.add(caseInsts);
            
            return ifNode;
        }
        // Valida si tiene nodo default
        else if (casesNode.valor.equals("default")) {
            Nodo caseNode = casesNode.hijos.get(0);
            Nodo caseExpr = caseNode.hijos.get(0);
            Nodo caseInsts = caseNode.hijos.get(1);
            
            // Crea el nodo de comparacion del if
            Nodo comparison = new Nodo("==");
            comparison.hijos.add(switchExpr);
            comparison.hijos.add(caseExpr);

            // Crea el nodo default 
            Nodo defaultNode = casesNode.hijos.get(1);
            Nodo defaultInsts = defaultNode.hijos.get(0);
            
            // Crea el nodo If del case y le agrega como else el nodo default
            Nodo ifNode = new Nodo("if");
            ifNode.hijos.add(comparison);
            ifNode.hijos.add(caseInsts);
            ifNode.hijos.add(defaultInsts);
                        
            return ifNode;
        }
        
        return new Nodo("error al transformar switch");
    }

  private final AnalisisSintactico parser;

  /** Constructor */
  CUP$AnalisisSintactico$actions(AnalisisSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalisisSintactico$do_action_part00000000(
    int                        CUP$AnalisisSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisisSintactico$parser,
    java.util.Stack            CUP$AnalisisSintactico$stack,
    int                        CUP$AnalisisSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalisisSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalisisSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalisisSintactico$parser.done_parsing();
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              Object RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
parser.instrucciones = insts;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              Nodo RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = insts;
nodo.hijos.add(inst);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("Instruccion");
nodo.hijos.add(inst);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= asignacion 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= if 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= while 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= for 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= dowhile 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= switch 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= puts 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= error 
            {
              Nodo RESULT =null;
		
Nodo n = new Nodo("Error");
RESULT = n;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // asignacion ::= ID IGUAL expresion 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodoId = new Nodo("variable");
nodoId.hijos.add(new Nodo(id));
Nodo inst = new Nodo("asignacion");
inst.hijos.add(nodoId);
inst.hijos.add(expr);
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("asignacion",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // if ::= SI expresion ENTONCES instrucciones FINSI PUNTO_COMA 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
Nodo nodo = new Nodo("if");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("if",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // if ::= SI expresion ENTONCES instrucciones NO instrucciones FINSI PUNTO_COMA 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int insts2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int insts2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo insts2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
Nodo nodo = new Nodo("if");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
nodo.hijos.add(insts2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("if",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // while ::= MIENTRAS expresion instrucciones FINMIENTRAS PUNTO_COMA 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
Nodo nodo = new Nodo("while");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("while",5, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // for ::= PARA asignacion HASTA ENTERO PASO ENTERO instrucciones SIGUIENTE ID PUNTO_COMA 
            {
              Nodo RESULT =null;
		int inicialeft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).left;
		int iniciaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).right;
		Nodo inicia = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).value;
		int comparaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int compararight = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		String compara = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int saltoleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int saltoright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		String salto = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("for");
// Nodo de asignacion inicial
Nodo asignFor = new Nodo("Instruccion");
asignFor.hijos.add(inicia);
nodo.hijos.add(asignFor);

// nodo de comparacion
Nodo nodoVariable = new Nodo("variable");
nodoVariable.hijos.add(new Nodo(id));

Nodo nodoValorCompara = new Nodo("valor");
Nodo tipoValorCompara = new Nodo("entero");
nodoValorCompara.hijos.add(tipoValorCompara);
tipoValorCompara.hijos.add(new Nodo(compara));

Nodo nodoMenorIgual = new Nodo("<=");
nodoMenorIgual.hijos.add(nodoVariable);
nodoMenorIgual.hijos.add(nodoValorCompara);

nodo.hijos.add(nodoMenorIgual);

// nodo de salto
Nodo nodoValorSalto = new Nodo("valor");
Nodo tipoValorSalto = new Nodo("entero");
nodoValorSalto.hijos.add(tipoValorSalto);
tipoValorSalto.hijos.add(new Nodo(salto));

Nodo nodoMas = new Nodo("+");
nodoMas.hijos.add(nodoVariable);
nodoMas.hijos.add(nodoValorSalto);

Nodo inst = new Nodo("asignacion");
inst.hijos.add(nodoVariable);
inst.hijos.add(nodoMas);

asignFor = new Nodo("Instruccion");
asignFor.hijos.add(inst);
nodo.hijos.add(asignFor);

// nodo de instrucciones
nodo.hijos.add(insts);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("for",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dowhile ::= HACER instrucciones REPETIRMIENTRAS expresion PUNTO_COMA 
            {
              Nodo RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("dowhile");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("dowhile",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // switch ::= SWITCH PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO LLAVE_ABIERTO cases LLAVE_CERRADO 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo cases = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo result = transforma_Switch_If(expr, cases);
RESULT = result;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("switch",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cases ::= case cases 
            {
              Nodo RESULT =null;
		int _caseleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int _caseright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo _case = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo cases = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 
Nodo nodo = new Nodo("cases");
nodo.hijos.add(cases);
nodo.hijos.add(_case);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("cases",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cases ::= case 
            {
              Nodo RESULT =null;
		int _caseleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int _caseright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo _case = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 
Nodo nodo = new Nodo("case1");
nodo.hijos.add(_case);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("cases",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cases ::= case default 
            {
              Nodo RESULT =null;
		int _caseleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int _caseright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo _case = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int _defleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int _defright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo _def = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 
Nodo nodo = new Nodo("default");
nodo.hijos.add(_case);
nodo.hijos.add(_def);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("cases",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // case ::= CASE expresion DOS_PUNTOS instrucciones END 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("case_data");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("case",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // case ::= CASE expresion DOS_PUNTOS instrucciones 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("case_data");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("case",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // default ::= DEFAULT DOS_PUNTOS instrucciones END 
            {
              Nodo RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("default");
nodo.hijos.add(insts);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("default",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // default ::= DEFAULT DOS_PUNTOS instrucciones 
            {
              Nodo RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("default");
nodo.hijos.add(insts);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("default",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // puts ::= PUTS expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo =  new Nodo("puts");
nodo.hijos.add(expr);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("puts",12, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= expresion MAS expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("+");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= expresion ASTERISCO expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("*");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= expresion MAYOR expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo(">");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= expresion MENOR expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("<");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= expresion IGUAL_IGUAL expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("==");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= NOT expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("not");
nodo.hijos.add(expr);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= expresion OR expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("or");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= expresion AND expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("and");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
RESULT = expr;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= CONCAT PARENTESIS_ABIERTO expresiones PARENTESIS_CERRADO 
            {
              Nodo RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo exprs = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("concatenar");
nodo.hijos.add(exprs);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("variable");
nodo.hijos.add(new Nodo(id));
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= ENTERO 
            {
              Nodo RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("entero");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(entero));
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= CADENA 
            {
              Nodo RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("cadena");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(cadena));
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresiones ::= expresiones COMA expresion 
            {
              Nodo RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo exprs = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = exprs;
nodo.hijos.add(expr);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresiones",14, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresiones ::= expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("Expresion");
nodo.hijos.add(expr);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresiones",14, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalisisSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalisisSintactico$do_action(
    int                        CUP$AnalisisSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisisSintactico$parser,
    java.util.Stack            CUP$AnalisisSintactico$stack,
    int                        CUP$AnalisisSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalisisSintactico$do_action_part00000000(
                               CUP$AnalisisSintactico$act_num,
                               CUP$AnalisisSintactico$parser,
                               CUP$AnalisisSintactico$stack,
                               CUP$AnalisisSintactico$top);
    }
}

}
